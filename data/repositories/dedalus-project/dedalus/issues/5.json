{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "links": {"attachments": {"href": "data/repositories/dedalus-project/dedalus/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/dedalus-project/dedalus/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/dedalus-project/dedalus/issues/5/watch"}, "comments": {"href": "data/repositories/dedalus-project/dedalus/issues/5/comments_page=1.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/5/allow-non-simulation-processes-to-handle"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/dedalus-project/dedalus/issues/5/vote"}}, "reporter": {"display_name": "Geoffrey Vasil", "uuid": "{ec9259be-a54c-4c63-b96f-730d3e89ef05}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bec9259be-a54c-4c63-b96f-730d3e89ef05%7D"}, "html": {"href": "https://bitbucket.org/%7Bec9259be-a54c-4c63-b96f-730d3e89ef05%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/066b34172584980740ef2ae4c530a8b3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsGV-6.png"}}, "nickname": "gvasil", "type": "user", "account_id": "557058:e21712ff-f90d-47dd-ac9d-39f9035f02bd"}, "title": "Allow non-simulation processes to handle e.g. IO", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Joe Werne (who really knows a lot about what he's doing) does something equivalent to the following with IO:\r\n\r\nWe're going to want the data in different formats, orderings, FFT spaces, reductions etc.  \r\n\r\nWhen it's an IO time step, it's a good idea to have the compute cores dump out their data in the format they happen to have it in at the time.  After that, a smaller number of dedicated analysis cores clean up and package the data into the format requested by the user.  \r\n\r\nI.e., Given the user's requested data product, the analysis cores ask for raw data from the compute cores at a point in the compute loop that corresponds closest to the needed type.  The compute cores dump out as fast as possible, and move on.  If we want the compute cores to limit the overall efficiency, then the number of analysis cores will scale in some proportion to the frequency of output, and complexity of reduction. \r\n\r\nAt worst, the compute cores create a backlog for the analysis cores. In this case, at the end of a simulation, the compute cores can switch to analysis and help clear the backlog.", "markup": "markdown", "html": "<p>Joe Werne (who really knows a lot about what he's doing) does something equivalent to the following with IO:</p>\n<p>We're going to want the data in different formats, orderings, FFT spaces, reductions etc.  </p>\n<p>When it's an IO time step, it's a good idea to have the compute cores dump out their data in the format they happen to have it in at the time.  After that, a smaller number of dedicated analysis cores clean up and package the data into the format requested by the user.  </p>\n<p>I.e., Given the user's requested data product, the analysis cores ask for raw data from the compute cores at a point in the compute loop that corresponds closest to the needed type.  The compute cores dump out as fast as possible, and move on.  If we want the compute cores to limit the overall efficiency, then the number of analysis cores will scale in some proportion to the frequency of output, and complexity of reduction. </p>\n<p>At worst, the compute cores create a backlog for the analysis cores. In this case, at the end of a simulation, the compute cores can switch to analysis and help clear the backlog.</p>", "type": "rendered"}, "assignee": null, "state": "on hold", "version": null, "edited_on": null, "created_on": "2013-07-15T16:36:42.227938+00:00", "milestone": null, "updated_on": "2018-10-30T21:14:17.722130+00:00", "type": "issue", "id": 5}