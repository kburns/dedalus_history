{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45195256.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45195256"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Ok I understand your point. Dedalus does not also implement the classic RK4 method ? Or the classical RK2 method ?\n\nI can't download the article (Elsevier) so I can't really study this RK443 scheme.  Are the equations summarized in the documentation of Dedalus or in another open document that I could get?  How do you choose the value of the time step for this scheme? Is it based on a CFL coefficient?\n\nNote that the linear terms are treated fully implicitly in some of the other codes (exact integration).\n\nTime stepping is a complicated subject (and there is also the issue of phase shifting which changes everything!), so it is not simple to compare the performance of different schemes. This is why I would prefer to compare the raw performance of the codes with a standard and simple time stepping method.", "markup": "markdown", "html": "<p>Ok I understand your point. Dedalus does not also implement the classic RK4 method ? Or the classical RK2 method ?</p>\n<p>I can't download the article (Elsevier) so I can't really study this RK443 scheme.  Are the equations summarized in the documentation of Dedalus or in another open document that I could get?  How do you choose the value of the time step for this scheme? Is it based on a CFL coefficient?</p>\n<p>Note that the linear terms are treated fully implicitly in some of the other codes (exact integration).</p>\n<p>Time stepping is a complicated subject (and there is also the issue of phase shifting which changes everything!), so it is not simple to compare the performance of different schemes. This is why I would prefer to compare the raw performance of the codes with a standard and simple time stepping method.</p>", "type": "rendered"}, "created_on": "2018-05-03T19:46:22.934206+00:00", "user": {"display_name": "Pierre Augier", "uuid": "{eb327c54-cadd-4fce-9edd-f8fe047a9b93}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D"}, "html": {"href": "https://bitbucket.org/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9b75dc331ab1b5d848887bdbec5ec539d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPA-2.png"}}, "nickname": "paugier", "type": "user", "account_id": "557058:6d18e2f1-34f0-4139-9028-bfdac251ab12"}, "updated_on": null, "type": "issue_comment", "id": 45195256}