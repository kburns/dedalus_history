{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45157521.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45157521"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-05-02T13:06:52.224345+00:00", "user": {"display_name": "Pierre Augier", "uuid": "{eb327c54-cadd-4fce-9edd-f8fe047a9b93}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D"}, "html": {"href": "https://bitbucket.org/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9b75dc331ab1b5d848887bdbec5ec539d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPA-2.png"}}, "nickname": "paugier", "type": "user", "account_id": "557058:6d18e2f1-34f0-4139-9028-bfdac251ab12"}, "updated_on": null, "type": "issue_comment", "id": 45157521}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45166423.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45166423"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Hi Pierre,\n\nThanks for your interest in comparing Dedalus to fluidsim -- it looks like a great project.\n\nIt looks like the version of the script in your repository is currently throwing a singular matrix error because the gauge of the streamfunction isn't specified, so I've modified the equations a bit to set it to zero (script attached).  With those changes, and the default Dedalus settings, I'm seeing a baseline time running the script serially with n=256 of T0 = 4.39 seconds on my laptop.  There are three major improvements I'd recommend making:\n\n1) Dedalus lazily constructs the required transform and transposes plans the first time they are required, which is typically during the first timestep.  This means the first timestep should usually be considered as a startup cost, and not indicative of the simulation speed.  If I simply copy your main loop to run 10 startup iterations, and then time the following 10, I get a time of T1 = 4.25 seconds.  Note this startup cost should become less important at higher resolutions, but maybe more important in parallel (due to transpose planning).\n\n2) The most important thing for improving performance is to set the \"STORE_LU\" option to True in the Dedalus configuration file.  This will store and re-use the LU factorization of the LHS matrices when the timestep is unchanged from the previous iteration.  It is currently off by default (which we should probably change), because the LU factorization library wrapped in Scipy can have an enormous memory footprint, and we were leaning towards stability over speed for the default settings.  Changing this flag, I get a time of T2 = 1.38 seconds.\n\n3) Finally, I noticed you're using the RK443 timestepper.  This is a 4-stage 3rd order Runge-Kutta method, which will be evaluating the RHS expressions and solving the LHS matrices 4 times per iteration.  If you're using the same method for other codes, that's ok, but otherwise it's probably most fair to pick timesteppers with the same number of solves per iteration.  A good substitute might be SBDF3, which is a 3rd order multistep method that only uses one solve per iteration.  Switching to SBDF3, I get a time of T3 = 0.38 seconds.\n\nI'd also point out that Dedalus doesn't implement any fully explicit timesteppers -- they are all IMEX schemes, which may make comparisons to fully explicit codes a little tricky, since you're trading off speed-per-iteration for stability with larger timesteps.  From our previous comparisons, we very roughly expect Dedalus to be 2-4x slower than other implicitly-timestepped Fourier pseudospectral codes -- I think it's fair to say that our focus so far has been optimizing for bounded domains with Chebyshev methods.\n\nBest,\n-Keaton", "markup": "markdown", "html": "<p>Hi Pierre,</p>\n<p>Thanks for your interest in comparing Dedalus to fluidsim -- it looks like a great project.</p>\n<p>It looks like the version of the script in your repository is currently throwing a singular matrix error because the gauge of the streamfunction isn't specified, so I've modified the equations a bit to set it to zero (script attached).  With those changes, and the default Dedalus settings, I'm seeing a baseline time running the script serially with n=256 of T0 = 4.39 seconds on my laptop.  There are three major improvements I'd recommend making:</p>\n<p>1) Dedalus lazily constructs the required transform and transposes plans the first time they are required, which is typically during the first timestep.  This means the first timestep should usually be considered as a startup cost, and not indicative of the simulation speed.  If I simply copy your main loop to run 10 startup iterations, and then time the following 10, I get a time of T1 = 4.25 seconds.  Note this startup cost should become less important at higher resolutions, but maybe more important in parallel (due to transpose planning).</p>\n<p>2) The most important thing for improving performance is to set the \"STORE_LU\" option to True in the Dedalus configuration file.  This will store and re-use the LU factorization of the LHS matrices when the timestep is unchanged from the previous iteration.  It is currently off by default (which we should probably change), because the LU factorization library wrapped in Scipy can have an enormous memory footprint, and we were leaning towards stability over speed for the default settings.  Changing this flag, I get a time of T2 = 1.38 seconds.</p>\n<p>3) Finally, I noticed you're using the RK443 timestepper.  This is a 4-stage 3rd order Runge-Kutta method, which will be evaluating the RHS expressions and solving the LHS matrices 4 times per iteration.  If you're using the same method for other codes, that's ok, but otherwise it's probably most fair to pick timesteppers with the same number of solves per iteration.  A good substitute might be SBDF3, which is a 3rd order multistep method that only uses one solve per iteration.  Switching to SBDF3, I get a time of T3 = 0.38 seconds.</p>\n<p>I'd also point out that Dedalus doesn't implement any fully explicit timesteppers -- they are all IMEX schemes, which may make comparisons to fully explicit codes a little tricky, since you're trading off speed-per-iteration for stability with larger timesteps.  From our previous comparisons, we very roughly expect Dedalus to be 2-4x slower than other implicitly-timestepped Fourier pseudospectral codes -- I think it's fair to say that our focus so far has been optimizing for bounded domains with Chebyshev methods.</p>\n<p>Best,\n-Keaton</p>", "type": "rendered"}, "created_on": "2018-05-02T19:20:41.160198+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 45166423}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45166447.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45166447"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "ns2d_rot.py, updated to set streamfunction gauge, use SBDF3, and separate startup loops from timing loops.", "markup": "markdown", "html": "<p>ns2d_rot.py, updated to set streamfunction gauge, use SBDF3, and separate startup loops from timing loops.</p>", "type": "rendered"}, "created_on": "2018-05-02T19:22:26.608856+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 45166447}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45166455.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45166455"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Configuration file with STORE_LU set to True.", "markup": "markdown", "html": "<p>Configuration file with STORE_LU set to True.</p>", "type": "rendered"}, "created_on": "2018-05-02T19:22:50.523173+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 45166455}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45182674.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45182674"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Hi Keaton,\n\nThank you for your nice answer.\n\nFor simplicity and to be fair with all codes, I will simply compare the elapsed time for 10 RK4 time steps. All codes implement a Runge-Kutta 4 scheme and it is often a good and simple choice for real life simulations.\n\nFor the considered case (NS2D, Fourier-Fourier, RK4), Dedalus is indeed quite slow (~ 15 time slower than fluidsim).  Of course I'm going to point out that Dedalus is very versatile and that it has been more optimized for bounded domains with Chebyshev methods.", "markup": "markdown", "html": "<p>Hi Keaton,</p>\n<p>Thank you for your nice answer.</p>\n<p>For simplicity and to be fair with all codes, I will simply compare the elapsed time for 10 RK4 time steps. All codes implement a Runge-Kutta 4 scheme and it is often a good and simple choice for real life simulations.</p>\n<p>For the considered case (NS2D, Fourier-Fourier, RK4), Dedalus is indeed quite slow (~ 15 time slower than fluidsim).  Of course I'm going to point out that Dedalus is very versatile and that it has been more optimized for bounded domains with Chebyshev methods.</p>", "type": "rendered"}, "created_on": "2018-05-03T13:06:11.053722+00:00", "user": {"display_name": "Pierre Augier", "uuid": "{eb327c54-cadd-4fce-9edd-f8fe047a9b93}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D"}, "html": {"href": "https://bitbucket.org/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9b75dc331ab1b5d848887bdbec5ec539d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPA-2.png"}}, "nickname": "paugier", "type": "user", "account_id": "557058:6d18e2f1-34f0-4139-9028-bfdac251ab12"}, "updated_on": null, "type": "issue_comment", "id": 45182674}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45184659.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45184659"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Hi Pierre,\n\nI'm not sure it's the right comparison -- if I understand correctly, the other codes are implementing the classic 4-stage explicit RK4 method, correct?  Our RK443 is **NOT** this scheme.  It is a 4-stage, third-order mixed implicit-explicit scheme described in  [Ascher 1997](https://doi.org/10.1016/S0168-9274(97)00056-1).  The first is fully explicit but the second is performing four implicit matrix solves per iteration.  They are very different schemes with very different stability properties, with the IMEX scheme allowing for much larger timestep sizes in practice.  \n\nSince the codes do not implement comparable methods, perhaps a better test of performance is to compute the time necessary to compute a particular solution within a given accuracy, allowing for different timesteps between different integrators?  We'd be happy to help set this up if you're interested.\n\nBest,\n-Keaton", "markup": "markdown", "html": "<p>Hi Pierre,</p>\n<p>I'm not sure it's the right comparison -- if I understand correctly, the other codes are implementing the classic 4-stage explicit RK4 method, correct?  Our RK443 is <strong>NOT</strong> this scheme.  It is a 4-stage, third-order mixed implicit-explicit scheme described in  <a data-is-external-link=\"true\" href=\"https://doi.org/10.1016/S0168-9274(97)00056-1\" rel=\"nofollow\">Ascher 1997</a>.  The first is fully explicit but the second is performing four implicit matrix solves per iteration.  They are very different schemes with very different stability properties, with the IMEX scheme allowing for much larger timestep sizes in practice.  </p>\n<p>Since the codes do not implement comparable methods, perhaps a better test of performance is to compute the time necessary to compute a particular solution within a given accuracy, allowing for different timesteps between different integrators?  We'd be happy to help set this up if you're interested.</p>\n<p>Best,\n-Keaton</p>", "type": "rendered"}, "created_on": "2018-05-03T14:08:04.706361+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 45184659}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/45195256.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-45195256"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Ok I understand your point. Dedalus does not also implement the classic RK4 method ? Or the classical RK2 method ?\n\nI can't download the article (Elsevier) so I can't really study this RK443 scheme.  Are the equations summarized in the documentation of Dedalus or in another open document that I could get?  How do you choose the value of the time step for this scheme? Is it based on a CFL coefficient?\n\nNote that the linear terms are treated fully implicitly in some of the other codes (exact integration).\n\nTime stepping is a complicated subject (and there is also the issue of phase shifting which changes everything!), so it is not simple to compare the performance of different schemes. This is why I would prefer to compare the raw performance of the codes with a standard and simple time stepping method.", "markup": "markdown", "html": "<p>Ok I understand your point. Dedalus does not also implement the classic RK4 method ? Or the classical RK2 method ?</p>\n<p>I can't download the article (Elsevier) so I can't really study this RK443 scheme.  Are the equations summarized in the documentation of Dedalus or in another open document that I could get?  How do you choose the value of the time step for this scheme? Is it based on a CFL coefficient?</p>\n<p>Note that the linear terms are treated fully implicitly in some of the other codes (exact integration).</p>\n<p>Time stepping is a complicated subject (and there is also the issue of phase shifting which changes everything!), so it is not simple to compare the performance of different schemes. This is why I would prefer to compare the raw performance of the codes with a standard and simple time stepping method.</p>", "type": "rendered"}, "created_on": "2018-05-03T19:46:22.934206+00:00", "user": {"display_name": "Pierre Augier", "uuid": "{eb327c54-cadd-4fce-9edd-f8fe047a9b93}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D"}, "html": {"href": "https://bitbucket.org/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9b75dc331ab1b5d848887bdbec5ec539d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPA-2.png"}}, "nickname": "paugier", "type": "user", "account_id": "557058:6d18e2f1-34f0-4139-9028-bfdac251ab12"}, "updated_on": null, "type": "issue_comment", "id": 45195256}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/46563627.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-46563627"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Hi Pierre, sorry for the delay, I was wrapping up my thesis and then took some time off!  Currently, we just implement IMEX schemes, so no fully explicit methods or exponential-explicit methods, since these aren't practical for the matrices that come from Chebyshev discretizations.  The tableaus of the implemented schemes are listed in the timesteppers.py module, and the general form for both the IMEX RK schemes and IMEX multistep schemes are listed in the class docstrings there.\n\nFor a fluid simulation, the timestep is usually based on a CFL coefficient when the viscous terms are integrated implicitly.  In practice we find that the maximum stable safety factor can vary by a substantial amount for different integrators depending on the equation set, which is why we took the approach of just implementing a range of options and letting the user test and pick the best option for their specific equations.\n\nWe've thought a bit about implementing some exponential timesteppers which should speed things up for constant-coefficeint, fully-Fourier problems, but haven't gotten around to this yet since we're all primarily using Chebyshev discretizations in our research.  This would also be a welcome pull-request if anyone reading would like to take a crack at it!", "markup": "markdown", "html": "<p>Hi Pierre, sorry for the delay, I was wrapping up my thesis and then took some time off!  Currently, we just implement IMEX schemes, so no fully explicit methods or exponential-explicit methods, since these aren't practical for the matrices that come from Chebyshev discretizations.  The tableaus of the implemented schemes are listed in the timesteppers.py module, and the general form for both the IMEX RK schemes and IMEX multistep schemes are listed in the class docstrings there.</p>\n<p>For a fluid simulation, the timestep is usually based on a CFL coefficient when the viscous terms are integrated implicitly.  In practice we find that the maximum stable safety factor can vary by a substantial amount for different integrators depending on the equation set, which is why we took the approach of just implementing a range of options and letting the user test and pick the best option for their specific equations.</p>\n<p>We've thought a bit about implementing some exponential timesteppers which should speed things up for constant-coefficeint, fully-Fourier problems, but haven't gotten around to this yet since we're all primarily using Chebyshev discretizations in our research.  This would also be a welcome pull-request if anyone reading would like to take a crack at it!</p>", "type": "rendered"}, "created_on": "2018-07-03T20:00:56.258636+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 46563627}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/46634701.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-46634701"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Hi Pierre, another big thing to check -- are you trying to compare to other spectral codes using 512 x 512 dealiased modes or a 512 x 512 grid?  In Dedalus, the \"resolution\" of the bases corresponds to dealiased modes, and dealiasing is done by padding the modes by 3/2 before transforming, so these Dedalus simulations correspond to a grid size of 768 x 768.  If you're comparing to other codes which start with a 512 x 512 grid and apply a 2/3 truncation to dealias, then the right comparison would be to set the Dedalus basis resolution to 341, and the dealias keyword to 512/341 to end up on a 512 x 512 grid.", "markup": "markdown", "html": "<p>Hi Pierre, another big thing to check -- are you trying to compare to other spectral codes using 512 x 512 dealiased modes or a 512 x 512 grid?  In Dedalus, the \"resolution\" of the bases corresponds to dealiased modes, and dealiasing is done by padding the modes by 3/2 before transforming, so these Dedalus simulations correspond to a grid size of 768 x 768.  If you're comparing to other codes which start with a 512 x 512 grid and apply a 2/3 truncation to dealias, then the right comparison would be to set the Dedalus basis resolution to 341, and the dealias keyword to 512/341 to end up on a 512 x 512 grid.</p>", "type": "rendered"}, "created_on": "2018-07-07T18:48:14.899043+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 46634701}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/48496100.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-48496100"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Ok I took a closer look at the script, and noticed that there's also big improvements we can make to the problem formulation.  In Dedalus, only Chebyshev problems need to be reduced to first order, but higher-order derivatives are fine with Fourier bases.  This means all of the diagnostic equations here can actually be replaced with substitution rules relating rot, u, and v to psi.  Making these changes also speeds up the code quite a bit, in addition to compensating for the different dealiasing strategies.  Currently timings on my laptop look like:\n\nFluidSim:  \n512^2 grid: 0.56 sec  \n1024^2 grid: 2.76 sec  \n\nOld Dedalus script:  \n512^2 modes: 5.73 sec  \n1024^2 modes: 26.93 sec  \n\nUpdated Dedalus script:  \n512^2 grid: 1.19 sec  \n1024^2 grid: 6.78 sec  \n\nI'll post this over on the FluidSim issue as well.", "markup": "markdown", "html": "<p>Ok I took a closer look at the script, and noticed that there's also big improvements we can make to the problem formulation.  In Dedalus, only Chebyshev problems need to be reduced to first order, but higher-order derivatives are fine with Fourier bases.  This means all of the diagnostic equations here can actually be replaced with substitution rules relating rot, u, and v to psi.  Making these changes also speeds up the code quite a bit, in addition to compensating for the different dealiasing strategies.  Currently timings on my laptop look like:</p>\n<p>FluidSim:<br />\n512^2 grid: 0.56 sec<br />\n1024^2 grid: 2.76 sec  </p>\n<p>Old Dedalus script:<br />\n512^2 modes: 5.73 sec<br />\n1024^2 modes: 26.93 sec  </p>\n<p>Updated Dedalus script:<br />\n512^2 grid: 1.19 sec<br />\n1024^2 grid: 6.78 sec  </p>\n<p>I'll post this over on the FluidSim issue as well.</p>", "type": "rendered"}, "created_on": "2018-10-22T20:21:25.403280+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2018-10-22T20:26:44.272854+00:00", "type": "issue_comment", "id": 48496100}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/48527885.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-48527885"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "I confirm the nice improvement for Dedalus! Here are my measurements:\n\n```\naugier3pi@meige8pcpa79:~/Dev/fluidsim/bench/dedalus$ time python ns2d_rot_faster.py\n2018-10-24 10:17:24,379 pencil 0/1 INFO :: Building pencil matrix 1/171 (~1%) Elapsed: 0s, Remaining: 38s, Rate: 4.5e+00/s\n2018-10-24 10:17:28,216 pencil 0/1 INFO :: Building pencil matrix 18/171 (~11%) Elapsed: 4s, Remaining: 35s, Rate: 4.4e+00/s\n2018-10-24 10:17:32,193 pencil 0/1 INFO :: Building pencil matrix 36/171 (~21%) Elapsed: 8s, Remaining: 30s, Rate: 4.5e+00/s\n2018-10-24 10:17:34,197 pencil 0/1 INFO :: Building pencil matrix 45/171 (~26%) Elapsed: 10s, Remaining: 28s, Rate: 4.5e+00/s\n2018-10-24 10:17:36,202 pencil 0/1 INFO :: Building pencil matrix 54/171 (~32%) Elapsed: 12s, Remaining: 26s, Rate: 4.5e+00/s\n2018-10-24 10:17:40,211 pencil 0/1 INFO :: Building pencil matrix 72/171 (~42%) Elapsed: 16s, Remaining: 22s, Rate: 4.5e+00/s\n2018-10-24 10:17:44,248 pencil 0/1 INFO :: Building pencil matrix 90/171 (~53%) Elapsed: 20s, Remaining: 18s, Rate: 4.5e+00/s\n2018-10-24 10:17:48,339 pencil 0/1 INFO :: Building pencil matrix 108/171 (~63%) Elapsed: 24s, Remaining: 14s, Rate: 4.5e+00/s\n2018-10-24 10:17:52,393 pencil 0/1 INFO :: Building pencil matrix 126/171 (~74%) Elapsed: 28s, Remaining: 10s, Rate: 4.5e+00/s\n2018-10-24 10:17:54,160 pencil 0/1 INFO :: Building pencil matrix 134/171 (~78%) Elapsed: 30s, Remaining: 8s, Rate: 4.5e+00/s\n2018-10-24 10:17:56,405 pencil 0/1 INFO :: Building pencil matrix 144/171 (~84%) Elapsed: 32s, Remaining: 6s, Rate: 4.5e+00/s\n2018-10-24 10:18:00,536 pencil 0/1 INFO :: Building pencil matrix 162/171 (~95%) Elapsed: 36s, Remaining: 2s, Rate: 4.5e+00/s\n2018-10-24 10:18:02,561 pencil 0/1 INFO :: Building pencil matrix 171/171 (~100%) Elapsed: 38s, Remaining: 0s, Rate: 4.5e+00/s\nStarting startup loop...\nRun time for startup loop: 2.106695\nStarting main time loop...\nRun time for main loop: 1.607797\n\nreal\t0m43.280s\nuser\t0m42.668s\nsys\t0m0.820s\n\n\naugier3pi@meige8pcpa79:~/Dev/fluidsim/bench/dedalus$ time fluidsim-bench 512 -d 2 -s ns2d -it 10\nnh = (512, 512); Lh = (8, 8)\nrunning a benchmark simulation... done.\n10 time steps computed in 0.51 s\nresults benchmarks saved in\n/tmp/fluidsim_bench/result_bench_ns2d_512x512_np=1_default_2018-10-24_10-33-2516769.json\n\nCleaning up simulation.\n\nreal\t0m2.603s\nuser\t0m2.132s\nsys\t0m0.600s\n\n```", "markup": "markdown", "html": "<p>I confirm the nice improvement for Dedalus! Here are my measurements:</p>\n<div class=\"codehilite\"><pre><span></span>augier3pi@meige8pcpa79:~/Dev/fluidsim/bench/dedalus$ time python ns2d_rot_faster.py\n2018-10-24 10:17:24,379 pencil 0/1 INFO :: Building pencil matrix 1/171 (~1%) Elapsed: 0s, Remaining: 38s, Rate: 4.5e+00/s\n2018-10-24 10:17:28,216 pencil 0/1 INFO :: Building pencil matrix 18/171 (~11%) Elapsed: 4s, Remaining: 35s, Rate: 4.4e+00/s\n2018-10-24 10:17:32,193 pencil 0/1 INFO :: Building pencil matrix 36/171 (~21%) Elapsed: 8s, Remaining: 30s, Rate: 4.5e+00/s\n2018-10-24 10:17:34,197 pencil 0/1 INFO :: Building pencil matrix 45/171 (~26%) Elapsed: 10s, Remaining: 28s, Rate: 4.5e+00/s\n2018-10-24 10:17:36,202 pencil 0/1 INFO :: Building pencil matrix 54/171 (~32%) Elapsed: 12s, Remaining: 26s, Rate: 4.5e+00/s\n2018-10-24 10:17:40,211 pencil 0/1 INFO :: Building pencil matrix 72/171 (~42%) Elapsed: 16s, Remaining: 22s, Rate: 4.5e+00/s\n2018-10-24 10:17:44,248 pencil 0/1 INFO :: Building pencil matrix 90/171 (~53%) Elapsed: 20s, Remaining: 18s, Rate: 4.5e+00/s\n2018-10-24 10:17:48,339 pencil 0/1 INFO :: Building pencil matrix 108/171 (~63%) Elapsed: 24s, Remaining: 14s, Rate: 4.5e+00/s\n2018-10-24 10:17:52,393 pencil 0/1 INFO :: Building pencil matrix 126/171 (~74%) Elapsed: 28s, Remaining: 10s, Rate: 4.5e+00/s\n2018-10-24 10:17:54,160 pencil 0/1 INFO :: Building pencil matrix 134/171 (~78%) Elapsed: 30s, Remaining: 8s, Rate: 4.5e+00/s\n2018-10-24 10:17:56,405 pencil 0/1 INFO :: Building pencil matrix 144/171 (~84%) Elapsed: 32s, Remaining: 6s, Rate: 4.5e+00/s\n2018-10-24 10:18:00,536 pencil 0/1 INFO :: Building pencil matrix 162/171 (~95%) Elapsed: 36s, Remaining: 2s, Rate: 4.5e+00/s\n2018-10-24 10:18:02,561 pencil 0/1 INFO :: Building pencil matrix 171/171 (~100%) Elapsed: 38s, Remaining: 0s, Rate: 4.5e+00/s\nStarting startup loop...\nRun time for startup loop: 2.106695\nStarting main time loop...\nRun time for main loop: 1.607797\n\nreal    0m43.280s\nuser    0m42.668s\nsys 0m0.820s\n\n\naugier3pi@meige8pcpa79:~/Dev/fluidsim/bench/dedalus$ time fluidsim-bench 512 -d 2 -s ns2d -it 10\nnh = (512, 512); Lh = (8, 8)\nrunning a benchmark simulation... done.\n10 time steps computed in 0.51 s\nresults benchmarks saved in\n/tmp/fluidsim_bench/result_bench_ns2d_512x512_np=1_default_2018-10-24_10-33-2516769.json\n\nCleaning up simulation.\n\nreal    0m2.603s\nuser    0m2.132s\nsys 0m0.600s\n</pre></div>", "type": "rendered"}, "created_on": "2018-10-24T08:47:09.080175+00:00", "user": {"display_name": "Pierre Augier", "uuid": "{eb327c54-cadd-4fce-9edd-f8fe047a9b93}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D"}, "html": {"href": "https://bitbucket.org/%7Beb327c54-cadd-4fce-9edd-f8fe047a9b93%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9b75dc331ab1b5d848887bdbec5ec539d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPA-2.png"}}, "nickname": "paugier", "type": "user", "account_id": "557058:6d18e2f1-34f0-4139-9028-bfdac251ab12"}, "updated_on": null, "type": "issue_comment", "id": 48527885}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/48650045.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-48650045"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": "Great, thanks for taking another look!", "markup": "markdown", "html": "<p>Great, thanks for taking another look!</p>", "type": "rendered"}, "created_on": "2018-10-30T20:00:11.417749+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 48650045}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38/comments/48650049.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/38#comment-48650049"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Slow simulation NS2D over a biperiodic space?"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2018-10-30T20:00:27.828975+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 48650049}], "page": 1, "size": 13}