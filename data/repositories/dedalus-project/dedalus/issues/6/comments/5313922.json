{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/6/comments/5313922.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/6#comment-5313922"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/6.json"}}, "type": "issue", "id": 6, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Non-constant coefficients"}, "content": {"raw": "The basic implementation of this requires left-multiplying the Evaluation and Differentiation matrices by Multiplication matrices, i.e. M = Sum_p( (T_p E) kron m0_p + (T_p D) kron m1_p).  \n\nThis is going to require some reformulation of our approach to boundary conditions:  we currently just have blank rows at the end of the Evaluation and Differentiation to leave space for the boundary conditions, but these introduce errors into other rows when this multiplication takes place.  We'll need to define the full/proper E and D matrices (no skipped rows), do all of the matrix construction, and then go through and replace rows with the boundary conditions as needed.\n\nNote: this is a possible solution to the problem posed by algebraic relations, as well (i.e. blocks where we want to relate variables, but without a differential operator and hence without a boundary condition).", "markup": "markdown", "html": "<p>The basic implementation of this requires left-multiplying the Evaluation and Differentiation matrices by Multiplication matrices, i.e. M = Sum_p( (T_p E) kron m0_p + (T_p D) kron m1_p).  </p>\n<p>This is going to require some reformulation of our approach to boundary conditions:  we currently just have blank rows at the end of the Evaluation and Differentiation to leave space for the boundary conditions, but these introduce errors into other rows when this multiplication takes place.  We'll need to define the full/proper E and D matrices (no skipped rows), do all of the matrix construction, and then go through and replace rows with the boundary conditions as needed.</p>\n<p>Note: this is a possible solution to the problem posed by algebraic relations, as well (i.e. blocks where we want to relate variables, but without a differential operator and hence without a boundary condition).</p>", "type": "rendered"}, "created_on": "2013-07-24T20:06:07.707512+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 5313922}