{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19319388.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19319388"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "I think this is a great idea but there are a couple subtleties. \n\nFirst, as we've seen, people often enter their equations in an inhomogeous form, in which case dropping the nonlinear terms does not produce a valid eigenvalue problem, and dropping the entire RHS (including homogeneous terms) gives the wrong answer.  To safeguard against this, I've added a check that requires the RHS in an eigenvalue problem to be homogeneous, i.e. equal to 0 when all the state variables are set to zero.\n\nSecond, it's possible for the RHS in an IVP to contain linear terms, and we don't want to drop these from the derived eigenvalue problem, so even in the homogeneous case we don't want to just zero the entire RHS.  Instead, I've used some of the techniques from the NLBVP to extract any linear terms from the RHS and include them in the EVP.\n\nI've tested this implementation with the 2D rayleigh benard script and pushed to the main repo (commit cf96463).  To build the EVP of an IVP, you just need to change the problem definition from something like\n\n\n```\n#!python\n\nproblem = de.IVP(domain, variables=['p','b','u','w','bz','uz','wz'])\n```\n\n\nto something like\n\n\n```\n#!python\n\nproblem = de.EVP(domain, variables=['p','b','u','w','bz','uz','wz'], eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j*omega*A\"\n```\n", "markup": "markdown", "html": "<p>I think this is a great idea but there are a couple subtleties. </p>\n<p>First, as we've seen, people often enter their equations in an inhomogeous form, in which case dropping the nonlinear terms does not produce a valid eigenvalue problem, and dropping the entire RHS (including homogeneous terms) gives the wrong answer.  To safeguard against this, I've added a check that requires the RHS in an eigenvalue problem to be homogeneous, i.e. equal to 0 when all the state variables are set to zero.</p>\n<p>Second, it's possible for the RHS in an IVP to contain linear terms, and we don't want to drop these from the derived eigenvalue problem, so even in the homogeneous case we don't want to just zero the entire RHS.  Instead, I've used some of the techniques from the NLBVP to extract any linear terms from the RHS and include them in the EVP.</p>\n<p>I've tested this implementation with the 2D rayleigh benard script and pushed to the main repo (commit <a href=\"#!/dedalus-project/dedalus/commits/cf96463\" rel=\"nofollow\" class=\"ap-connect-link\">cf96463</a>).  To build the EVP of an IVP, you just need to change the problem definition from something like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">IVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>to something like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">EVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">],</span> <span class=\"n\">eigenvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;omega&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">substitutions</span><span class=\"p\">[</span><span class=\"s1\">&#39;dt(A)&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1j*omega*A&quot;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-26T17:08:37.568776+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2015-06-26T17:09:24.238042+00:00", "type": "issue_comment", "id": 19319388}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19320225.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19320225"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "Keaton,\n      That looks fantastic.  Thank you for taking care of that so quickly and thoroughly.\n\n\nAs a note in case anyone tries using this directly, to do the \"-1j*omega*A\" substitution, the user should also change the grid_dtype to be of complex type (using np.complex128 rather than e.g., np.float64) when setting up domain.  Ryan Orvedahl came across this, and it was a bit subtle to debug.\n\nHere is an example for 2-D:\n\n\n```\n#!python\n\nfrom dedalus import public as de\n\n<...>\n\nx_basis = de.Fourier(  'x', nx, interval=[0., Lx], dealias=3/2)\nz_basis = de.Chebyshev('z', nz, interval=[0., Lz], dealias=3/2)\ndomain = de.Domain([x_basis, z_basis], grid_dtype=np.float64)\nproblem = de.IVP(domain, variables=['p','b','u','w','bz','uz','wz'])\n\n<...>\n```\n\n\ntransforms into:\n\n\n\n```\n#!python\n\nfrom dedalus import public as de\n\n<...>\n\nx_basis = de.Fourier(  'x', nx, interval=[0., Lx], dealias=3/2)\nz_basis = de.Chebyshev('z', nz, interval=[0., Lz], dealias=3/2)\ndomain = de.Domain([x_basis, z_basis], grid_dtype=np.complex128)\nproblem = de.EVP(domain, variables=['p','b','u','w','bz','uz','wz'], eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j*omega*A\"\n\n<...>\n```\n\n", "markup": "markdown", "html": "<p>Keaton,\n      That looks fantastic.  Thank you for taking care of that so quickly and thoroughly.</p>\n<p>As a note in case anyone tries using this directly, to do the \"-1j<em>omega</em>A\" substitution, the user should also change the grid_dtype to be of complex type (using np.complex128 rather than e.g., np.float64) when setting up domain.  Ryan Orvedahl came across this, and it was a bit subtle to debug.</p>\n<p>Here is an example for 2-D:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dedalus</span> <span class=\"kn\">import</span> <span class=\"n\">public</span> <span class=\"k\">as</span> <span class=\"n\">de</span>\n\n<span class=\"o\">&lt;...&gt;</span>\n\n<span class=\"n\">x_basis</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Fourier</span><span class=\"p\">(</span>  <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">Lx</span><span class=\"p\">],</span> <span class=\"n\">dealias</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z_basis</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Chebyshev</span><span class=\"p\">(</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">,</span> <span class=\"n\">nz</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">Lz</span><span class=\"p\">],</span> <span class=\"n\">dealias</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Domain</span><span class=\"p\">([</span><span class=\"n\">x_basis</span><span class=\"p\">,</span> <span class=\"n\">z_basis</span><span class=\"p\">],</span> <span class=\"n\">grid_dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">IVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">])</span>\n\n<span class=\"o\">&lt;...&gt;</span>\n</pre></div>\n\n\n<p>transforms into:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dedalus</span> <span class=\"kn\">import</span> <span class=\"n\">public</span> <span class=\"k\">as</span> <span class=\"n\">de</span>\n\n<span class=\"o\">&lt;...&gt;</span>\n\n<span class=\"n\">x_basis</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Fourier</span><span class=\"p\">(</span>  <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">Lx</span><span class=\"p\">],</span> <span class=\"n\">dealias</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z_basis</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Chebyshev</span><span class=\"p\">(</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">,</span> <span class=\"n\">nz</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"n\">Lz</span><span class=\"p\">],</span> <span class=\"n\">dealias</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">Domain</span><span class=\"p\">([</span><span class=\"n\">x_basis</span><span class=\"p\">,</span> <span class=\"n\">z_basis</span><span class=\"p\">],</span> <span class=\"n\">grid_dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">complex128</span><span class=\"p\">)</span>\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">EVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">],</span> <span class=\"n\">eigenvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;omega&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">substitutions</span><span class=\"p\">[</span><span class=\"s1\">&#39;dt(A)&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1j*omega*A&quot;</span>\n\n<span class=\"o\">&lt;...&gt;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-26T18:10:31.861845+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": null, "type": "issue_comment", "id": 19320225}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19320471.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19320471"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "Do you know what issue he was seeing?  I tried it directly like this, still using float64 and everything seemed to work, but maybe I missed something.", "markup": "markdown", "html": "<p>Do you know what issue he was seeing?  I tried it directly like this, still using float64 and everything seemed to work, but maybe I missed something.</p>", "type": "rendered"}, "created_on": "2015-06-26T18:21:54.501371+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 19320471}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19322821.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19322821"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "Good question.  I'll ask.  Maybe it's all fine without that change....", "markup": "markdown", "html": "<p>Good question.  I'll ask.  Maybe it's all fine without that change....</p>", "type": "rendered"}, "created_on": "2015-06-26T21:24:03.899291+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": null, "type": "issue_comment", "id": 19322821}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19323223.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19323223"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "When I was using this formulation:\n\ndomain = de.Domain([x_base, z_base], grid_dtype=np.float64)\nproblem = de.EVP(domain, variables=vars, eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j*omega*A\"\n\nI would get every eigenvalue to be either Inf or NaN. Just for fun I changed my substitution to be:\n\nproblem.substitutions['dt(A)'] = \"-omega*A\"\n\n(i.e. just remove the imaginary unit) and I had actual numbers for eigenvalues. When I changed the grid type to be complex (as Ben has it 2 posts above) and replaced the imaginary unit, it works just fine and does not have as many Infs and NaNs.\n\nI just checked my code to be sure and found 2 potential issues:\n\n-- each case uses the \"-j*omega*A\" substitution\n\n-- complex grid works just fine producing complex eigenvalues; terms like \"r*-1j\" and \"r*r*-1j\" are expanded to 1 and 2 modes respectively (as expected)\n\n-- when I switch to a float64 grid all of my eigenvalues are 0 and terms like \"r*-1\" and \"r*r*-1j\" are expanded to 0 modes with 0 terms", "markup": "markdown", "html": "<p>When I was using this formulation:</p>\n<p>domain = de.Domain([x_base, z_base], grid_dtype=np.float64)\nproblem = de.EVP(domain, variables=vars, eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j<em>omega</em>A\"</p>\n<p>I would get every eigenvalue to be either Inf or NaN. Just for fun I changed my substitution to be:</p>\n<p>problem.substitutions['dt(A)'] = \"-omega*A\"</p>\n<p>(i.e. just remove the imaginary unit) and I had actual numbers for eigenvalues. When I changed the grid type to be complex (as Ben has it 2 posts above) and replaced the imaginary unit, it works just fine and does not have as many Infs and NaNs.</p>\n<p>I just checked my code to be sure and found 2 potential issues:</p>\n<p>-- each case uses the \"-j<em>omega</em>A\" substitution</p>\n<p>-- complex grid works just fine producing complex eigenvalues; terms like \"r<em>-1j\" and \"r</em>r*-1j\" are expanded to 1 and 2 modes respectively (as expected)</p>\n<p>-- when I switch to a float64 grid all of my eigenvalues are 0 and terms like \"r<em>-1\" and \"r</em>r*-1j\" are expanded to 0 modes with 0 terms</p>", "type": "rendered"}, "created_on": "2015-06-26T22:00:46.153886+00:00", "user": {"display_name": "Ryan Orvedahl", "uuid": "{d9a8e2ed-0b60-478d-8221-6a3578e9ac0a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D"}, "html": {"href": "https://bitbucket.org/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:d24a0759-e207-4e08-bb02-cf9f7f58e013/50f6d9c3-179c-429a-af1c-cac0830b2bcc/128"}}, "nickname": "orvedahl", "type": "user", "account_id": "557058:d24a0759-e207-4e08-bb02-cf9f7f58e013"}, "updated_on": null, "type": "issue_comment", "id": 19323223}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19409041.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19409041"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "Do you remember what basis types you were using?  I'm not entirely sure what's going on -- if you happen to still have a script showing this and wouldn't mind sending it along, that would be great.  ", "markup": "markdown", "html": "<p>Do you remember what basis types you were using?  I'm not entirely sure what's going on -- if you happen to still have a script showing this and wouldn't mind sending it along, that would be great.  </p>", "type": "rendered"}, "created_on": "2015-06-30T20:54:35.114393+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": null, "type": "issue_comment", "id": 19409041}, {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19410214.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19410214"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "It is Fourier in the theta/azimuthal direction, Fourier in the z direction and Chebyshev in the radial direction (using a cylindrical geometry).\n\nI also just realized my previous post may have been somewhat confusing: the \"r-1j\" and \"rr*-1j\" stuff refers to terms that look like \"-1j*r\" and \"-1j*r*r\" which arise from multiplying the equations by either r or r**2.\n\nI will try to find a script that shows this behavior and send it out", "markup": "markdown", "html": "<p>It is Fourier in the theta/azimuthal direction, Fourier in the z direction and Chebyshev in the radial direction (using a cylindrical geometry).</p>\n<p>I also just realized my previous post may have been somewhat confusing: the \"r-1j\" and \"rr<em>-1j\" stuff refers to terms that look like \"-1j</em>r\" and \"-1j<em>r</em>r\" which arise from multiplying the equations by either r or r**2.</p>\n<p>I will try to find a script that shows this behavior and send it out</p>", "type": "rendered"}, "created_on": "2015-06-30T22:06:31.488912+00:00", "user": {"display_name": "Ryan Orvedahl", "uuid": "{d9a8e2ed-0b60-478d-8221-6a3578e9ac0a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D"}, "html": {"href": "https://bitbucket.org/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:d24a0759-e207-4e08-bb02-cf9f7f58e013/50f6d9c3-179c-429a-af1c-cac0830b2bcc/128"}}, "nickname": "orvedahl", "type": "user", "account_id": "557058:d24a0759-e207-4e08-bb02-cf9f7f58e013"}, "updated_on": null, "type": "issue_comment", "id": 19410214}], "page": 1, "size": 7}