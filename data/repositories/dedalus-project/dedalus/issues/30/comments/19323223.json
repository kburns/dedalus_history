{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19323223.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19323223"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "When I was using this formulation:\n\ndomain = de.Domain([x_base, z_base], grid_dtype=np.float64)\nproblem = de.EVP(domain, variables=vars, eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j*omega*A\"\n\nI would get every eigenvalue to be either Inf or NaN. Just for fun I changed my substitution to be:\n\nproblem.substitutions['dt(A)'] = \"-omega*A\"\n\n(i.e. just remove the imaginary unit) and I had actual numbers for eigenvalues. When I changed the grid type to be complex (as Ben has it 2 posts above) and replaced the imaginary unit, it works just fine and does not have as many Infs and NaNs.\n\nI just checked my code to be sure and found 2 potential issues:\n\n-- each case uses the \"-j*omega*A\" substitution\n\n-- complex grid works just fine producing complex eigenvalues; terms like \"r*-1j\" and \"r*r*-1j\" are expanded to 1 and 2 modes respectively (as expected)\n\n-- when I switch to a float64 grid all of my eigenvalues are 0 and terms like \"r*-1\" and \"r*r*-1j\" are expanded to 0 modes with 0 terms", "markup": "markdown", "html": "<p>When I was using this formulation:</p>\n<p>domain = de.Domain([x_base, z_base], grid_dtype=np.float64)\nproblem = de.EVP(domain, variables=vars, eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j<em>omega</em>A\"</p>\n<p>I would get every eigenvalue to be either Inf or NaN. Just for fun I changed my substitution to be:</p>\n<p>problem.substitutions['dt(A)'] = \"-omega*A\"</p>\n<p>(i.e. just remove the imaginary unit) and I had actual numbers for eigenvalues. When I changed the grid type to be complex (as Ben has it 2 posts above) and replaced the imaginary unit, it works just fine and does not have as many Infs and NaNs.</p>\n<p>I just checked my code to be sure and found 2 potential issues:</p>\n<p>-- each case uses the \"-j<em>omega</em>A\" substitution</p>\n<p>-- complex grid works just fine producing complex eigenvalues; terms like \"r<em>-1j\" and \"r</em>r*-1j\" are expanded to 1 and 2 modes respectively (as expected)</p>\n<p>-- when I switch to a float64 grid all of my eigenvalues are 0 and terms like \"r<em>-1\" and \"r</em>r*-1j\" are expanded to 0 modes with 0 terms</p>", "type": "rendered"}, "created_on": "2015-06-26T22:00:46.153886+00:00", "user": {"display_name": "Ryan Orvedahl", "uuid": "{d9a8e2ed-0b60-478d-8221-6a3578e9ac0a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D"}, "html": {"href": "https://bitbucket.org/%7Bd9a8e2ed-0b60-478d-8221-6a3578e9ac0a%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:d24a0759-e207-4e08-bb02-cf9f7f58e013/50f6d9c3-179c-429a-af1c-cac0830b2bcc/128"}}, "nickname": "orvedahl", "type": "user", "account_id": "557058:d24a0759-e207-4e08-bb02-cf9f7f58e013"}, "updated_on": null, "type": "issue_comment", "id": 19323223}