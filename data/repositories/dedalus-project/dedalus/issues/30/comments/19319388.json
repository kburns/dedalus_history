{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30/comments/19319388.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/30#comment-19319388"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/30.json"}}, "type": "issue", "id": 30, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "EVP should be able to automatically set RHS to zero"}, "content": {"raw": "I think this is a great idea but there are a couple subtleties. \n\nFirst, as we've seen, people often enter their equations in an inhomogeous form, in which case dropping the nonlinear terms does not produce a valid eigenvalue problem, and dropping the entire RHS (including homogeneous terms) gives the wrong answer.  To safeguard against this, I've added a check that requires the RHS in an eigenvalue problem to be homogeneous, i.e. equal to 0 when all the state variables are set to zero.\n\nSecond, it's possible for the RHS in an IVP to contain linear terms, and we don't want to drop these from the derived eigenvalue problem, so even in the homogeneous case we don't want to just zero the entire RHS.  Instead, I've used some of the techniques from the NLBVP to extract any linear terms from the RHS and include them in the EVP.\n\nI've tested this implementation with the 2D rayleigh benard script and pushed to the main repo (commit cf96463).  To build the EVP of an IVP, you just need to change the problem definition from something like\n\n\n```\n#!python\n\nproblem = de.IVP(domain, variables=['p','b','u','w','bz','uz','wz'])\n```\n\n\nto something like\n\n\n```\n#!python\n\nproblem = de.EVP(domain, variables=['p','b','u','w','bz','uz','wz'], eigenvalue='omega')\nproblem.substitutions['dt(A)'] = \"-1j*omega*A\"\n```\n", "markup": "markdown", "html": "<p>I think this is a great idea but there are a couple subtleties. </p>\n<p>First, as we've seen, people often enter their equations in an inhomogeous form, in which case dropping the nonlinear terms does not produce a valid eigenvalue problem, and dropping the entire RHS (including homogeneous terms) gives the wrong answer.  To safeguard against this, I've added a check that requires the RHS in an eigenvalue problem to be homogeneous, i.e. equal to 0 when all the state variables are set to zero.</p>\n<p>Second, it's possible for the RHS in an IVP to contain linear terms, and we don't want to drop these from the derived eigenvalue problem, so even in the homogeneous case we don't want to just zero the entire RHS.  Instead, I've used some of the techniques from the NLBVP to extract any linear terms from the RHS and include them in the EVP.</p>\n<p>I've tested this implementation with the 2D rayleigh benard script and pushed to the main repo (commit <a href=\"#!/dedalus-project/dedalus/commits/cf96463\" rel=\"nofollow\" class=\"ap-connect-link\">cf96463</a>).  To build the EVP of an IVP, you just need to change the problem definition from something like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">IVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>to something like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">EVP</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;bz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;uz&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;wz&#39;</span><span class=\"p\">],</span> <span class=\"n\">eigenvalue</span><span class=\"o\">=</span><span class=\"s1\">&#39;omega&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">substitutions</span><span class=\"p\">[</span><span class=\"s1\">&#39;dt(A)&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1j*omega*A&quot;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-06-26T17:08:37.568776+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2015-06-26T17:09:24.238042+00:00", "type": "issue_comment", "id": 19319388}