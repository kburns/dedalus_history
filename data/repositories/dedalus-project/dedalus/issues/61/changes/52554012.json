{"changes": {"assignee_account_id": {"new": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819", "old": ""}, "assignee": {"new": "jsoishi", "old": ""}}, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/61/changes/52554012.json"}, "html": {"href": "#!/dedalus-project/dedalus/issues/61#comment-52554012"}}, "issue": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/issues/61.json"}}, "type": "issue", "id": 61, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "title": "Eigenvalue problems extremely slow using default conda install"}, "created_on": "2019-06-12T17:52:48.395394+00:00", "user": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "message": {"raw": "The default conda installation method leads to extremely slow Eigenvalue problems. On the Bates College Leavitt cluster, a comparison between an older, install-script installation leads to the following:\r\n\r\n## 1D Rayleigh-Benard Eigenvalue example\r\n\r\n* conda install: 32 sec\r\n* install script: 3.2 sec\r\n\r\nInterestingly, the IVPs are not nearly as affected. \r\n\r\n## 3D Rayleigh-Benard Initial Value example\r\n\r\n* conda install: 949 sec\r\n* install script: 879 sec\r\n\r\nI have tried even more difficult eigenvalue problems, and the problem becomes even worse as the startup costs get pushed down. \r\n\r\nI used cProfile to note that the biggest difference, accounting for nearly all of the eigenvalue differential is `arpack.py` from the scipy sparse linear algebra package.\r\n\r\nBy using `objdump -x \"_arpack.cpython-37m-x86_64-linux-gnu.so\" | grep NEEDED` on the two versions of `_arpack.cpython-37m-x86_64-linux-gnu.so`, it appears as though the difference is that conda uses openblas, while my install script installation used atlas. While this has a minor difference \\(~10% or so\\) for IVPs, for eigenvalue problems, it appears to be devastating  \\(10-16x in my tests!\\).", "markup": "markdown", "html": "<p>The default conda installation method leads to extremely slow Eigenvalue problems. On the Bates College Leavitt cluster, a comparison between an older, install-script installation leads to the following:</p>\n<h2 id=\"markdown-header-1d-rayleigh-benard-eigenvalue-example\">1D Rayleigh-Benard Eigenvalue example</h2>\n<ul>\n<li>conda install: 32 sec</li>\n<li>install script: 3.2 sec</li>\n</ul>\n<p>Interestingly, the IVPs are not nearly as affected. </p>\n<h2 id=\"markdown-header-3d-rayleigh-benard-initial-value-example\">3D Rayleigh-Benard Initial Value example</h2>\n<ul>\n<li>conda install: 949 sec</li>\n<li>install script: 879 sec</li>\n</ul>\n<p>I have tried even more difficult eigenvalue problems, and the problem becomes even worse as the startup costs get pushed down. </p>\n<p>I used cProfile to note that the biggest difference, accounting for nearly all of the eigenvalue differential is <code>arpack.py</code> from the scipy sparse linear algebra package.</p>\n<p>By using <code>objdump -x \"_arpack.cpython-37m-x86_64-linux-gnu.so\" | grep NEEDED</code> on the two versions of <code>_arpack.cpython-37m-x86_64-linux-gnu.so</code>, it appears as though the difference is that conda uses openblas, while my install script installation used atlas. While this has a minor difference (~10% or so) for IVPs, for eigenvalue problems, it appears to be devastating  (10-16x in my tests!).</p>", "type": "rendered"}, "type": "issue_change", "id": 52554012}