{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/42/comments/30506183.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/42/_/diff#comment-30506183"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 42, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/42.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/42"}}, "title": "Cythonize explicit Chebyshev derivative"}, "content": {"raw": "These look good.  I just did a production test using the exoweather/polytrope repo doing stratified convection; this is a problem with a complex set of equations (navier stokes in stratified atmosphere) with an number of NCCs and about 7 equations in total and of these 4 have a chebyshev derivative on the RHS.  I tried out one of our biggest 2-D cases (nx, nz = 4096, 1024) and the cythonized derivatives show an improvement.  All runs were on NASA Pleiades, using 512 cores on the same set of nodes (technical notes: eps=0.5, nrho=3, Ra=1e8, interactive queue, haswell cores).\n\nI did two tests.  In test 1 I ran for 500 iterations (rk443), timing both our most current main branch and the cythonized version.  Here are the main loop timings (smaller is better):\n\n\n```\n#!python\n\nmain:           1.2690468235015868 sec/iter\ncythonized:     1.1567662358283997 sec/iter\nspeedup:        1.1x\n\n```\n\nBoth runs show identical values for CFL computed timestep, and for RMS and max Reynolds number (only 4 sig figs were reported), so the results look plausibly identical.\n\nIn the second test, I ran both for 15 minutes.  This means the cythonized version achieved more timesteps total, which makes the comparison less apples-to-apples, but is interesting from a production perspective:\n\n\n```\n#!python\n\nmain:           1.2427246854969929 sec/iter        721 iter total    \ncythonized:     1.0569670048524749 sec/iter        848 iter total\nspeedup:        1.2x\n\n```\n\nSo these look good to me.  I'll be interested to see how they test out in some other real world tests.  We'll report back on those when they're done, but this is good to merge in my mind.\n\nThanks Keaton!", "markup": "markdown", "html": "<p>These look good.  I just did a production test using the <a href=\"https://bitbucket.org/exoweather/polytrope\" rel=\"nofollow\" class=\"ap-connect-link\">exoweather/polytrope</a> repo doing stratified convection; this is a problem with a complex set of equations (navier stokes in stratified atmosphere) with an number of NCCs and about 7 equations in total and of these 4 have a chebyshev derivative on the RHS.  I tried out one of our biggest 2-D cases (nx, nz = 4096, 1024) and the cythonized derivatives show an improvement.  All runs were on NASA Pleiades, using 512 cores on the same set of nodes (technical notes: eps=0.5, nrho=3, Ra=1e8, interactive queue, haswell cores).</p>\n<p>I did two tests.  In test 1 I ran for 500 iterations (rk443), timing both our most current main branch and the cythonized version.  Here are the main loop timings (smaller is better):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">main</span><span class=\"p\">:</span>           <span class=\"mf\">1.2690468235015868</span> <span class=\"n\">sec</span><span class=\"o\">/</span><span class=\"nb\">iter</span>\n<span class=\"n\">cythonized</span><span class=\"p\">:</span>     <span class=\"mf\">1.1567662358283997</span> <span class=\"n\">sec</span><span class=\"o\">/</span><span class=\"nb\">iter</span>\n<span class=\"n\">speedup</span><span class=\"p\">:</span>        <span class=\"mf\">1.1</span><span class=\"n\">x</span>\n</pre></div>\n\n\n<p>Both runs show identical values for CFL computed timestep, and for RMS and max Reynolds number (only 4 sig figs were reported), so the results look plausibly identical.</p>\n<p>In the second test, I ran both for 15 minutes.  This means the cythonized version achieved more timesteps total, which makes the comparison less apples-to-apples, but is interesting from a production perspective:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">main</span><span class=\"p\">:</span>           <span class=\"mf\">1.2427246854969929</span> <span class=\"n\">sec</span><span class=\"o\">/</span><span class=\"nb\">iter</span>        <span class=\"mi\">721</span> <span class=\"nb\">iter</span> <span class=\"n\">total</span>    \n<span class=\"n\">cythonized</span><span class=\"p\">:</span>     <span class=\"mf\">1.0569670048524749</span> <span class=\"n\">sec</span><span class=\"o\">/</span><span class=\"nb\">iter</span>        <span class=\"mi\">848</span> <span class=\"nb\">iter</span> <span class=\"n\">total</span>\n<span class=\"n\">speedup</span><span class=\"p\">:</span>        <span class=\"mf\">1.2</span><span class=\"n\">x</span>\n</pre></div>\n\n\n<p>So these look good to me.  I'll be interested to see how they test out in some other real world tests.  We'll report back on those when they're done, but this is good to merge in my mind.</p>\n<p>Thanks Keaton!</p>", "type": "rendered"}, "created_on": "2017-01-29T20:50:22.548441+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": "2017-01-29T20:50:22.550638+00:00", "type": "pullrequest_comment", "id": 30506183}