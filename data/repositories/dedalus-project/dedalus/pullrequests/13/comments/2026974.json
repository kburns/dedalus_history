{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/13/comments/2026974.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/13/_/diff#comment-2026974"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 13, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/13.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/13"}}, "title": "WIP: Eigenvalue solver; antidifferentiate methods; mid-domain BC"}, "content": {"raw": "The second implementation looks pretty good.  Is doing the matrix solve easier than using the recursion relations?  If so, then we should probably replace the differentiate function with something like this too.  I guess the idea is that the Diff matrix and differentiate/antidifferentiate methods are redundant.  When people make new tau bases in the future, they don't want to have to type out the same code several times (higher chance of errors...).\n\nAlso, I now remember why I think we should we should add the state variables to the evaluator dictionary for the LinearBVP.  Imagine that you solve your linear BVP, and then want to do some analysis on your solution.  For instance, you might to know the volume integrated kinetic energy.  The easiest way I can think of to do this is to create a dictionary handler, add a task which does Integrate(rho0/2*(u**2+w**2)), and then evaluate this handler.  For doing these sorts of analysis tasks, you want u and w to be in the evaluator dictionary.", "markup": "markdown", "html": "<p>The second implementation looks pretty good.  Is doing the matrix solve easier than using the recursion relations?  If so, then we should probably replace the differentiate function with something like this too.  I guess the idea is that the Diff matrix and differentiate/antidifferentiate methods are redundant.  When people make new tau bases in the future, they don't want to have to type out the same code several times (higher chance of errors...).</p>\n<p>Also, I now remember why I think we should we should add the state variables to the evaluator dictionary for the LinearBVP.  Imagine that you solve your linear BVP, and then want to do some analysis on your solution.  For instance, you might to know the volume integrated kinetic energy.  The easiest way I can think of to do this is to create a dictionary handler, add a task which does Integrate(rho0/2*(u<strong>2+w</strong>2)), and then evaluate this handler.  For doing these sorts of analysis tasks, you want u and w to be in the evaluator dictionary.</p>", "type": "rendered"}, "created_on": "2014-06-02T17:42:08.189592+00:00", "user": {"display_name": "Daniel Lecoanet", "uuid": "{0ff8d177-8703-4f25-93d4-68857e948a31}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0ff8d177-8703-4f25-93d4-68857e948a31%7D"}, "html": {"href": "https://bitbucket.org/%7B0ff8d177-8703-4f25-93d4-68857e948a31%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/829d5ddfabf278a6c21111d4de2fe031d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDL-3.png"}}, "nickname": "lecoanet", "type": "user", "account_id": "557058:ba5c14ee-54e1-4d72-aa9e-1e2a4c5ab718"}, "updated_on": "2014-06-02T17:42:08.199399+00:00", "type": "pullrequest_comment", "id": 2026974}