{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/13/comments/2055192.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/13/_/diff#comment-2055192"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 13, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/13.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/13"}}, "title": "WIP: Eigenvalue solver; antidifferentiate methods; mid-domain BC"}, "content": {"raw": "To comment on what Ben just wrote... My impression is that we can't just add extra equations like rho_z-dz(rho)=0 because we would need to add extra boundary conditions, which we don't have.  Is that right?  Or does the code realize that the rho_z-dz(rho)=0 is redundant, and not implement a boundary condition?\n\nJust to have an example to fix ideas, consider the non-dimensionalized buckling beam equation:\n\ndt^2(u) + (mu - int_0^y dy(u)*dy(u)) dy^2(u) + dy^4(u) = 0\n\nI would implement this in Dedalus as\n\n```\n#!python\n\nu_t - dt(u) = 0\nu_y - dy(u) = 0\nu_yy - dy(u_y) = 0\nu_yyy - dy(u_yy) = 0\n\ndt(u_t) + mu u_yy + dy(u_yyy) = antideriv( u_y**2 ) u_yy\n```\n\nI don't see any way to get rid of the antideriv( u_y**2 ) term.", "markup": "markdown", "html": "<p>To comment on what Ben just wrote... My impression is that we can't just add extra equations like rho_z-dz(rho)=0 because we would need to add extra boundary conditions, which we don't have.  Is that right?  Or does the code realize that the rho_z-dz(rho)=0 is redundant, and not implement a boundary condition?</p>\n<p>Just to have an example to fix ideas, consider the non-dimensionalized buckling beam equation:</p>\n<p>dt^2(u) + (mu - int_0^y dy(u)*dy(u)) dy^2(u) + dy^4(u) = 0</p>\n<p>I would implement this in Dedalus as</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">u_t</span> <span class=\"o\">-</span> <span class=\"n\">dt</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">u_y</span> <span class=\"o\">-</span> <span class=\"n\">dy</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">u_yy</span> <span class=\"o\">-</span> <span class=\"n\">dy</span><span class=\"p\">(</span><span class=\"n\">u_y</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">u_yyy</span> <span class=\"o\">-</span> <span class=\"n\">dy</span><span class=\"p\">(</span><span class=\"n\">u_yy</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">dt</span><span class=\"p\">(</span><span class=\"n\">u_t</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">mu</span> <span class=\"n\">u_yy</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"p\">(</span><span class=\"n\">u_yyy</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">antideriv</span><span class=\"p\">(</span> <span class=\"n\">u_y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"p\">)</span> <span class=\"n\">u_yy</span>\n</pre></div>\n\n\n<p>I don't see any way to get rid of the antideriv( u_y**2 ) term.</p>", "type": "rendered"}, "created_on": "2014-06-05T00:02:14.240984+00:00", "user": {"display_name": "Daniel Lecoanet", "uuid": "{0ff8d177-8703-4f25-93d4-68857e948a31}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0ff8d177-8703-4f25-93d4-68857e948a31%7D"}, "html": {"href": "https://bitbucket.org/%7B0ff8d177-8703-4f25-93d4-68857e948a31%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/829d5ddfabf278a6c21111d4de2fe031d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDL-3.png"}}, "nickname": "lecoanet", "type": "user", "account_id": "557058:ba5c14ee-54e1-4d72-aa9e-1e2a4c5ab718"}, "updated_on": "2014-06-05T00:02:14.248409+00:00", "type": "pullrequest_comment", "id": 2055192}