{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/32/comments/9189225.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/32/_/diff#comment-9189225"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 32, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/32.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/32"}}, "title": "Allows for homogeneous expressions (beyond \"0\") on RHS of EVP"}, "content": {"raw": "I just pushed up a first run implementation of allowing a homogeneity tolerance (basically, accepting the RHS for the EVP if it's essentially zero).  The logic of what I've implemented is this:\n\n1. Evaluate the expression\n2. PIck out the max(abs(evaluated expression))\n3. Pick out the max(abs(all of the NCCs that went into calculating that expression))\n4. compare max(evaluated) / max(NCCs) to a tolerance (right now 1e-10 default or user-specified by kwarg)\n5. if the max ratio of #4 is < tol, then the expression is considered homogeneous.\n\nAs it currently stands, what this means is that if you have a problem with bigger parameters (let's say order 1e5), then the expression only has to have a max of 1e-5 in order to fit within a tol of 1e-10.  If you have maximum NCCs of 1e-3, then you need the expression maximum to be 1e-13 to fit within a tol of 1e-10.  This isn't a perfect implementation, and I'm definitely open to suggestions.\n\nOther things to note: I'm not sure where all of the functionality of dedalus is hidden and it's highly possible that I re-implemented something that it can already do.  If so, point me in the direction of those functions and I'll clean stuff up.\n\nI'm also happy to clean up comments and logger info, but right now I'm just trying to make things fairly obvious so that it's clear what I'm doing.", "markup": "markdown", "html": "<p>I just pushed up a first run implementation of allowing a homogeneity tolerance (basically, accepting the RHS for the EVP if it's essentially zero).  The logic of what I've implemented is this:</p>\n<ol>\n<li>Evaluate the expression</li>\n<li>PIck out the max(abs(evaluated expression))</li>\n<li>Pick out the max(abs(all of the NCCs that went into calculating that expression))</li>\n<li>compare max(evaluated) / max(NCCs) to a tolerance (right now 1e-10 default or user-specified by kwarg)</li>\n<li>if the max ratio of <a href=\"#!/dedalus-project/dedalus/issues/4/piecewise-bases\" rel=\"nofollow\" title=\"Piecewise bases\" class=\"ap-connect-link\"><s>#4</s></a> is &lt; tol, then the expression is considered homogeneous.</li>\n</ol>\n<p>As it currently stands, what this means is that if you have a problem with bigger parameters (let's say order 1e5), then the expression only has to have a max of 1e-5 in order to fit within a tol of 1e-10.  If you have maximum NCCs of 1e-3, then you need the expression maximum to be 1e-13 to fit within a tol of 1e-10.  This isn't a perfect implementation, and I'm definitely open to suggestions.</p>\n<p>Other things to note: I'm not sure where all of the functionality of dedalus is hidden and it's highly possible that I re-implemented something that it can already do.  If so, point me in the direction of those functions and I'll clean stuff up.</p>\n<p>I'm also happy to clean up comments and logger info, but right now I'm just trying to make things fairly obvious so that it's clear what I'm doing.</p>", "type": "rendered"}, "created_on": "2015-08-18T20:43:17.525140+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2015-08-18T20:43:17.723654+00:00", "type": "pullrequest_comment", "id": 9189225}