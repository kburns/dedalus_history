{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/19682081.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-19682081"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "I've finally figured out what the above bug was.  Not sure if it's a bug or if it's just me not using checkpointing as intended.  To keep my runs separate and clean, I've been saving everything related to one run in the same subdirectory.\n\nSo, say I have a run with output tasks 'scalar' and 'profiles' stored in 'FC_poly_Ra1e6', then once I start checkpointing I have FC_poly_Ra1e6/scalar, FC_poly_Ra1e6/profiles, and FC_poly_Ra1e6/checkpoint.  When I go to do data analysis (say, analyze fluxes from profiles/ and plot those up special), I'll create a new subdirectory, e.g. FC_poly_Ra1e6/fluxes and put the data in there.\n\nThe problem is that when we get subdirs in line 80 of checkpointing.py, it now grabs /fluxes/ and tries to checkpoint it.  Which causes an insta-crash.  Which makes me sad.\n\nSo there are really two solutions:\n\n1. Tell me to stop outputting the way I'm outputting (which is fine, but I think it's a natural-ish way of organizing data and someone down the road will probably do it, too.  But I'm fine with rearranging now that I know what's happening)\n2. Add a feature to checkpointing so you can specify which subdirectories we actually care about.\n\nI've personally implemented the latter in my local copy of Jeff's directory.  I'm about to send the file to Jeff in an e-mail, and if he likes the changes he can slot it in to his repo/PR.\n \nChanges:\n \n* I've added a new kwarg to Checkpoint's __init__ function, 'allowed_dirs=[]'.  It's an empty list.\n* I've added a description of it to the docstring:\n```\n#!python\n '''\n allowed_dirs : list, optional\n             If there are directories OTHER than dedalus output directories in the specified data_dir, checkpointing\n                 will crash on initialization.  This is a full list of non-checkpointing directories used in the \n                 dedalus run (e.g. ['scalars', 'profiles'])\n '''\n```\n* I've added it to the class' elements in the __init__ function:\n```\n#!python\n           self.allowed_dirs = allowed_dirs\n```\n* I've updated the conditional at line 80 in find_output_counts to check if the user has specified which directories to checkpoint:\n```\n#!python \n         if len(self.allowed_dirs) > 0:\n             subdirs = [x for x in self.data_dir.iterdir() if x.is_dir() and (x.name != \"checkpoint\" and x.name in self.allowed_dirs)]\n         else:\n            subdirs = [x for x in self.data_dir.iterdir() if x.is_dir() and x.name != \"checkpoint\"]\n```\n\n\nI apologize for being so...uh...vague with my earlier \"bug report.\"  Life gets busy and the work-around (sort of) worked.  Anyways, this works more robustly, fixes my case, and still maintains the integrity of checkpointing in general cases.  Hope this helps!\n\n", "markup": "markdown", "html": "<p>I've finally figured out what the above bug was.  Not sure if it's a bug or if it's just me not using checkpointing as intended.  To keep my runs separate and clean, I've been saving everything related to one run in the same subdirectory.</p>\n<p>So, say I have a run with output tasks 'scalar' and 'profiles' stored in 'FC_poly_Ra1e6', then once I start checkpointing I have FC_poly_Ra1e6/scalar, FC_poly_Ra1e6/profiles, and FC_poly_Ra1e6/checkpoint.  When I go to do data analysis (say, analyze fluxes from profiles/ and plot those up special), I'll create a new subdirectory, e.g. FC_poly_Ra1e6/fluxes and put the data in there.</p>\n<p>The problem is that when we get subdirs in line 80 of checkpointing.py, it now grabs /fluxes/ and tries to checkpoint it.  Which causes an insta-crash.  Which makes me sad.</p>\n<p>So there are really two solutions:</p>\n<ol>\n<li>Tell me to stop outputting the way I'm outputting (which is fine, but I think it's a natural-ish way of organizing data and someone down the road will probably do it, too.  But I'm fine with rearranging now that I know what's happening)</li>\n<li>Add a feature to checkpointing so you can specify which subdirectories we actually care about.</li>\n</ol>\n<p>I've personally implemented the latter in my local copy of Jeff's directory.  I'm about to send the file to Jeff in an e-mail, and if he likes the changes he can slot it in to his repo/PR.</p>\n<p>Changes:</p>\n<ul>\n<li>I've added a new kwarg to Checkpoint's <strong>init</strong> function, 'allowed_dirs=[]'.  It's an empty list.</li>\n<li>I've added a description of it to the docstring:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span> <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\"> allowed_dirs : list, optional</span>\n<span class=\"sd\">             If there are directories OTHER than dedalus output directories in the specified data_dir, checkpointing</span>\n<span class=\"sd\">                 will crash on initialization.  This is a full list of non-checkpointing directories used in the </span>\n<span class=\"sd\">                 dedalus run (e.g. [&#39;scalars&#39;, &#39;profiles&#39;])</span>\n<span class=\"sd\"> &#39;&#39;&#39;</span>\n</pre></div>\n\n\n<ul>\n<li>I've added it to the class' elements in the <strong>init</strong> function:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>           <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span> <span class=\"o\">=</span> <span class=\"n\">allowed_dirs</span>\n</pre></div>\n\n\n<ul>\n<li>I've updated the conditional at line 80 in find_output_counts to check if the user has specified which directories to checkpoint:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>         <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n             <span class=\"n\">subdirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dir</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;checkpoint&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span><span class=\"p\">)]</span>\n         <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">subdirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dir</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;checkpoint&quot;</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>I apologize for being so...uh...vague with my earlier \"bug report.\"  Life gets busy and the work-around (sort of) worked.  Anyways, this works more robustly, fixes my case, and still maintains the integrity of checkpointing in general cases.  Hope this helps!</p>", "type": "rendered"}, "created_on": "2016-06-13T17:01:24.990732+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2016-06-13T17:01:25.126682+00:00", "type": "pullrequest_comment", "id": 19682081}