{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/20619768.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-20619768"}}, "parent": {"id": 20515082, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/20515082.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-20515082"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Jeff,\n\nMakes sense, and I like the structure of picking out \"bad\" directories better than \"good\" ones, too.  It requires the user to be more certain about what they're specifying.  Sounds good to me!", "markup": "markdown", "html": "<p>Jeff,</p>\n<p>Makes sense, and I like the structure of picking out \"bad\" directories better than \"good\" ones, too.  It requires the user to be more certain about what they're specifying.  Sounds good to me!</p>", "type": "rendered"}, "created_on": "2016-07-05T17:01:30.787446+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2016-07-05T17:01:30.827199+00:00", "type": "pullrequest_comment", "id": 20619768}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "a1fb41ab442d", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/a1fb41ab442d.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/a1fb41ab442d"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-07-05T13:37:23.150051+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"approval": {"date": "2016-07-01T21:59:01.042359+00:00", "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/20526804.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-20526804"}}, "parent": {"id": 20515082, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/20515082.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-20515082"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "I like this \"excluded\" logic structure better.  Seems like a good idea to have the sims die rather than silently run and produce unexpected behaviour.", "markup": "markdown", "html": "<p>I like this \"excluded\" logic structure better.  Seems like a good idea to have the sims die rather than silently run and produce unexpected behaviour.</p>", "type": "rendered"}, "created_on": "2016-07-01T21:58:43.810747+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": "2016-07-01T21:58:43.815349+00:00", "type": "pullrequest_comment", "id": 20526804}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/20515082.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-20515082"}}, "parent": {"id": 19682081, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/19682081.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-19682081"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Hi Evan,\n\nThanks for the robust bug report and potential fix. I've tested your fix, but I've made one change. Rather than making a list of allowed_dirs and not restarting all others, I've reversed the logic to have an excluded_dirs list. This way, by default it will pick everything up. I think your use case might be the less common one. Regardless, this way, if you do something wrong, the simulation will simply die immediately. With the allowed_dirs method, if you forget to put all the analysis tasks in the allowed_dirs, the simulation will run, but will not continue all those analyses. What do you think?", "markup": "markdown", "html": "<p>Hi Evan,</p>\n<p>Thanks for the robust bug report and potential fix. I've tested your fix, but I've made one change. Rather than making a list of allowed_dirs and not restarting all others, I've reversed the logic to have an excluded_dirs list. This way, by default it will pick everything up. I think your use case might be the less common one. Regardless, this way, if you do something wrong, the simulation will simply die immediately. With the allowed_dirs method, if you forget to put all the analysis tasks in the allowed_dirs, the simulation will run, but will not continue all those analyses. What do you think?</p>", "type": "rendered"}, "created_on": "2016-07-01T15:29:51.942773+00:00", "user": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "updated_on": "2016-07-01T15:29:51.947235+00:00", "type": "pullrequest_comment", "id": 20515082}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/19682081.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-19682081"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "I've finally figured out what the above bug was.  Not sure if it's a bug or if it's just me not using checkpointing as intended.  To keep my runs separate and clean, I've been saving everything related to one run in the same subdirectory.\n\nSo, say I have a run with output tasks 'scalar' and 'profiles' stored in 'FC_poly_Ra1e6', then once I start checkpointing I have FC_poly_Ra1e6/scalar, FC_poly_Ra1e6/profiles, and FC_poly_Ra1e6/checkpoint.  When I go to do data analysis (say, analyze fluxes from profiles/ and plot those up special), I'll create a new subdirectory, e.g. FC_poly_Ra1e6/fluxes and put the data in there.\n\nThe problem is that when we get subdirs in line 80 of checkpointing.py, it now grabs /fluxes/ and tries to checkpoint it.  Which causes an insta-crash.  Which makes me sad.\n\nSo there are really two solutions:\n\n1. Tell me to stop outputting the way I'm outputting (which is fine, but I think it's a natural-ish way of organizing data and someone down the road will probably do it, too.  But I'm fine with rearranging now that I know what's happening)\n2. Add a feature to checkpointing so you can specify which subdirectories we actually care about.\n\nI've personally implemented the latter in my local copy of Jeff's directory.  I'm about to send the file to Jeff in an e-mail, and if he likes the changes he can slot it in to his repo/PR.\n \nChanges:\n \n* I've added a new kwarg to Checkpoint's __init__ function, 'allowed_dirs=[]'.  It's an empty list.\n* I've added a description of it to the docstring:\n```\n#!python\n '''\n allowed_dirs : list, optional\n             If there are directories OTHER than dedalus output directories in the specified data_dir, checkpointing\n                 will crash on initialization.  This is a full list of non-checkpointing directories used in the \n                 dedalus run (e.g. ['scalars', 'profiles'])\n '''\n```\n* I've added it to the class' elements in the __init__ function:\n```\n#!python\n           self.allowed_dirs = allowed_dirs\n```\n* I've updated the conditional at line 80 in find_output_counts to check if the user has specified which directories to checkpoint:\n```\n#!python \n         if len(self.allowed_dirs) > 0:\n             subdirs = [x for x in self.data_dir.iterdir() if x.is_dir() and (x.name != \"checkpoint\" and x.name in self.allowed_dirs)]\n         else:\n            subdirs = [x for x in self.data_dir.iterdir() if x.is_dir() and x.name != \"checkpoint\"]\n```\n\n\nI apologize for being so...uh...vague with my earlier \"bug report.\"  Life gets busy and the work-around (sort of) worked.  Anyways, this works more robustly, fixes my case, and still maintains the integrity of checkpointing in general cases.  Hope this helps!\n\n", "markup": "markdown", "html": "<p>I've finally figured out what the above bug was.  Not sure if it's a bug or if it's just me not using checkpointing as intended.  To keep my runs separate and clean, I've been saving everything related to one run in the same subdirectory.</p>\n<p>So, say I have a run with output tasks 'scalar' and 'profiles' stored in 'FC_poly_Ra1e6', then once I start checkpointing I have FC_poly_Ra1e6/scalar, FC_poly_Ra1e6/profiles, and FC_poly_Ra1e6/checkpoint.  When I go to do data analysis (say, analyze fluxes from profiles/ and plot those up special), I'll create a new subdirectory, e.g. FC_poly_Ra1e6/fluxes and put the data in there.</p>\n<p>The problem is that when we get subdirs in line 80 of checkpointing.py, it now grabs /fluxes/ and tries to checkpoint it.  Which causes an insta-crash.  Which makes me sad.</p>\n<p>So there are really two solutions:</p>\n<ol>\n<li>Tell me to stop outputting the way I'm outputting (which is fine, but I think it's a natural-ish way of organizing data and someone down the road will probably do it, too.  But I'm fine with rearranging now that I know what's happening)</li>\n<li>Add a feature to checkpointing so you can specify which subdirectories we actually care about.</li>\n</ol>\n<p>I've personally implemented the latter in my local copy of Jeff's directory.  I'm about to send the file to Jeff in an e-mail, and if he likes the changes he can slot it in to his repo/PR.</p>\n<p>Changes:</p>\n<ul>\n<li>I've added a new kwarg to Checkpoint's <strong>init</strong> function, 'allowed_dirs=[]'.  It's an empty list.</li>\n<li>I've added a description of it to the docstring:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span> <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\"> allowed_dirs : list, optional</span>\n<span class=\"sd\">             If there are directories OTHER than dedalus output directories in the specified data_dir, checkpointing</span>\n<span class=\"sd\">                 will crash on initialization.  This is a full list of non-checkpointing directories used in the </span>\n<span class=\"sd\">                 dedalus run (e.g. [&#39;scalars&#39;, &#39;profiles&#39;])</span>\n<span class=\"sd\"> &#39;&#39;&#39;</span>\n</pre></div>\n\n\n<ul>\n<li>I've added it to the class' elements in the <strong>init</strong> function:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>           <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span> <span class=\"o\">=</span> <span class=\"n\">allowed_dirs</span>\n</pre></div>\n\n\n<ul>\n<li>I've updated the conditional at line 80 in find_output_counts to check if the user has specified which directories to checkpoint:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>         <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n             <span class=\"n\">subdirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dir</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;checkpoint&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_dirs</span><span class=\"p\">)]</span>\n         <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">subdirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dir</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;checkpoint&quot;</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>I apologize for being so...uh...vague with my earlier \"bug report.\"  Life gets busy and the work-around (sort of) worked.  Anyways, this works more robustly, fixes my case, and still maintains the integrity of checkpointing in general cases.  Hope this helps!</p>", "type": "rendered"}, "created_on": "2016-06-13T17:01:24.990732+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2016-06-13T17:01:25.126682+00:00", "type": "pullrequest_comment", "id": 19682081}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "5f7fcdf21cd2", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/5f7fcdf21cd2.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/5f7fcdf21cd2"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-05-23T18:14:23.427768+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "5f7fcdf21cd2", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/5f7fcdf21cd2.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/5f7fcdf21cd2"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-05-10T03:07:45.283927+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "ed5938b03ae5", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/ed5938b03ae5.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/ed5938b03ae5"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-05-09T19:09:45.177778+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "57297578537e", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/57297578537e.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/57297578537e"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-05-08T14:30:49.301811+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "92683d9d25f4", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/92683d9d25f4.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/92683d9d25f4"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-05-04T21:39:33.906718+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "696e6a410e48", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/696e6a410e48.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/696e6a410e48"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-05-03T19:24:17.172584+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "2dbff3091411", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/2dbff3091411.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/2dbff3091411"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-05-02T16:32:03.654253+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "2dbff3091411", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/2dbff3091411.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/2dbff3091411"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-05-02T16:25:38.377272+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "2dbff3091411", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/2dbff3091411.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/2dbff3091411"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "21c12021bcd6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/21c12021bcd6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/21c12021bcd6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-05-02T16:25:37.475760+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "2dbff3091411", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/2dbff3091411.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/2dbff3091411"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "date": "2016-04-14T05:29:21.416121+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "36a62e23dd3c", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/36a62e23dd3c.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/36a62e23dd3c"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "date": "2016-04-14T05:20:02.387817+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14482311.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14482311"}}, "parent": {"id": 14439382, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14439382.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14439382"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "By the way -- this was a vague comment.  I'm going to re-run the simulation I did  and see if the problem is reproduce-able.  Probably won't know for sure until at least the weekend.  It was a ~12 hour run on Janus.\n\nUPDATE: Problem was re-produceable.  Sending an e-mail to Jeff with the files necessary to recreate it.", "markup": "markdown", "html": "<p>By the way -- this was a vague comment.  I'm going to re-run the simulation I did  and see if the problem is reproduce-able.  Probably won't know for sure until at least the weekend.  It was a ~12 hour run on Janus.</p>\n<p>UPDATE: Problem was re-produceable.  Sending an e-mail to Jeff with the files necessary to recreate it.</p>", "type": "rendered"}, "created_on": "2016-02-11T20:59:39.378521+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2016-02-13T18:46:12.526385+00:00", "type": "pullrequest_comment", "id": 14482311}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "5278f1abfe16", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/5278f1abfe16.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/5278f1abfe16"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-02-12T19:20:04.149913+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14439382.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14439382"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "First: I've been using this PR for a few days now -- works great!\n\nI just ran into a problem where I tried to restart a simulation where (I think?) my previous run had created a file but written nothing to it.  Not exactly sure.  It was weird.  BUT changing lines 99-100 of checkpointing.py to:\n\n```\n#!python\nif len(c) > 0 and len(s) > 0:\n    counts[d.name] = c.max()\n    sets[d.name] = s.max()\n```\nfixed the problem.  I had zero-length c's and s's, and it was exploding repeatedly.  Not sure WHY they were zero-length.\n", "markup": "markdown", "html": "<p>First: I've been using this PR for a few days now -- works great!</p>\n<p>I just ran into a problem where I tried to restart a simulation where (I think?) my previous run had created a file but written nothing to it.  Not exactly sure.  It was weird.  BUT changing lines 99-100 of checkpointing.py to:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n    <span class=\"n\">sets</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>fixed the problem.  I had zero-length c's and s's, and it was exploding repeatedly.  Not sure WHY they were zero-length.</p>", "type": "rendered"}, "created_on": "2016-02-11T02:59:34.988207+00:00", "user": {"display_name": "Evan Anders", "uuid": "{ce45a673-fcc9-48fc-a547-f4ee9f3a8020}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D"}, "html": {"href": "https://bitbucket.org/%7Bce45a673-fcc9-48fc-a547-f4ee9f3a8020%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:320d4568-38ec-40ab-9264-ac9b3760572a/7e7ec364-57a7-4b6a-809c-b17a66066163/128"}}, "nickname": "evanhanders", "type": "user", "account_id": "557058:320d4568-38ec-40ab-9264-ac9b3760572a"}, "updated_on": "2016-02-11T02:59:35.059701+00:00", "type": "pullrequest_comment", "id": 14439382}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "2091e01bca41", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/2091e01bca41.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/2091e01bca41"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2016-02-10T23:35:54.840818+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "1e72bdf0c3a8", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/1e72bdf0c3a8.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/1e72bdf0c3a8"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-02-09T16:21:30.380428+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "c169c5164a1c", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/c169c5164a1c.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/c169c5164a1c"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-02-05T20:43:16.407198+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14179674.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14179674"}}, "parent": {"id": 14179599, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14179599.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14179599"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "I think some the issues I mentioned in my first comment are still outstanding -- i.e. issues with the intermediate commits here that would be fixed by a collapse, I think", "markup": "markdown", "html": "<p>I think some the issues I mentioned in my first comment are still outstanding -- i.e. issues with the intermediate commits here that would be fixed by a collapse, I think</p>", "type": "rendered"}, "created_on": "2016-02-03T18:14:41.206097+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2016-02-03T18:14:41.208221+00:00", "type": "pullrequest_comment", "id": 14179674}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/14179599.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-14179599"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "What's the status of this PR?  Is there a hold-up on getting it merged in current condition?\n\n--Ben", "markup": "markdown", "html": "<p>What's the status of this PR?  Is there a hold-up on getting it merged in current condition?</p>\n<p>--Ben</p>", "type": "rendered"}, "created_on": "2016-02-03T18:12:45.322618+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": "2016-02-03T18:12:45.328410+00:00", "type": "pullrequest_comment", "id": 14179599}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "e6095c904564", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/e6095c904564.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/e6095c904564"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-01-31T15:56:33.146101+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "d3115289c588", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/d3115289c588.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/d3115289c588"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2016-01-13T19:28:21.595373+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/13063905.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-13063905"}}, "parent": {"id": 13050441, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/13050441.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-13050441"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Good catch. Fixed.", "markup": "markdown", "html": "<p>Good catch. Fixed.</p>", "type": "rendered"}, "created_on": "2015-12-28T17:53:49.386645+00:00", "user": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "updated_on": "2015-12-28T17:53:49.388770+00:00", "type": "pullrequest_comment", "id": 13063905}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "c549dea018ba", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/c549dea018ba.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/c549dea018ba"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "093ac369d0d6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/093ac369d0d6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/093ac369d0d6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-12-28T17:52:55.826606+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/13050445.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-13050445"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Replace with the following?\n\nself.file_write_num = h5file['/scales/write_number'][-1] % self.max_writes", "markup": "markdown", "html": "<p>Replace with the following?</p>\n<p>self.file_write_num = h5file['/scales/write_number'][-1] % self.max_writes</p>", "type": "rendered"}, "created_on": "2015-12-28T04:49:58.427050+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "inline": {}, "updated_on": "2015-12-28T04:49:58.429501+00:00", "type": "pullrequest_comment", "id": 13050445}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/13050441.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-13050441"}}, "parent": {"id": 12481777, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/12481777.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-12481777"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "it's this line (363 of evaluator.py) that seems to be the source of the problem:\n\n#!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyT363\n\nComment this out and we get the normal behaviour, where max_writes is respected, and `self.file_write_num` stays bounded between 1 and `self.max_writes`.  \n\nLeave it in and then writes continue to increment past `self.max_writes`, thereby failing to trigger the write num check at line #!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyF332T337 \n\nOne solution is to throw a mod statement in, possibly at the assignment statement.  This for example seems to work as a replacement for line 363:\n\n\n```\n#!python\n\nself.file_write_num = h5file['/scales/write_number'][-1] % self.max_writes\n```\n", "markup": "markdown", "html": "<p>it's this line (363 of evaluator.py) that seems to be the source of the problem:</p>\n<p><a href=\"#!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyT363\" rel=\"nofollow\" class=\"ap-connect-link\">#!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyT363</a></p>\n<p>Comment this out and we get the normal behaviour, where max_writes is respected, and <code>self.file_write_num</code> stays bounded between 1 and <code>self.max_writes</code>.  </p>\n<p>Leave it in and then writes continue to increment past <code>self.max_writes</code>, thereby failing to trigger the write num check at line <a href=\"#!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyF332T337\" rel=\"nofollow\" class=\"ap-connect-link\">#!/dedalus-project/dedalus/pull-requests/35/simple-checkpointing-mechanism/diff#Ldedalus/core/evaluator.pyF332T337</a> </p>\n<p>One solution is to throw a mod statement in, possibly at the assignment statement.  This for example seems to work as a replacement for line 363:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_write_num</span> <span class=\"o\">=</span> <span class=\"n\">h5file</span><span class=\"p\">[</span><span class=\"s1\">&#39;/scales/write_number&#39;</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_writes</span>\n</pre></div>", "type": "rendered"}, "created_on": "2015-12-28T04:49:27.236959+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": "2015-12-28T04:49:27.239439+00:00", "type": "pullrequest_comment", "id": 13050441}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "c549dea018ba", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/c549dea018ba.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/c549dea018ba"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-12-19T15:57:22.579269+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "4427bcb48e21", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/4427bcb48e21.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/4427bcb48e21"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-12-18T19:15:35.496061+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "dc356a856fcd", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/dc356a856fcd.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/dc356a856fcd"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-12-11T01:57:10.692479+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "98ad3fb1930c", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/98ad3fb1930c.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/98ad3fb1930c"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-12-09T23:29:25.746588+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/12481777.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-12481777"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Jeff,\n    I've been testing out checkpointing in this pull request.  The checkpointing itself (and restarts) works great (thanks Jeff!!!), but I have come across a very odd problem for other outputs.  When I'm doing runs using this PR (I have disabled checkpointing in the run in question, to try and narrow this down), I think that only the first set of normal analysis outputs respects the max_writes/file. \n\nIn particular, I'm doing 20 writes per file normally.  On the main branch of dedalus, this works as intended (just tested) and each file contains exactly 20 writes.  When I switch over to this PR and run the same script, the first output file (set 1) contains 20 writes as intended, but then the second output file contains arbitrarily many writes (all further writes go into set 2).\n\nHere's an h5dump on one of my output files (p0 of 256) in set 1 showing the expected 20 writes/file:\n\n\n```\n#!bash\n\n    h5dump FC_fixed_nrhocz2_Ra1e8_test/slices/slices_s1/slices_s1_p0.h5\n    <...>\n       ATTRIBUTE \"writes\" {\n          DATATYPE  H5T_STD_I64LE\n          DATASPACE  SCALAR\n          DATA {\n          (0): 20\n          }\n       }\n    <...>\n\n```\n\n\nand here is the same in set 2, showing an unexepected 69 writes (corresponding to when I killed the run; it would just keep accumulating otherwise in this same set):\n\n\n```\n#!bash\n\n     h5dump FC_fixed_nrhocz2_Ra1e8_test/slices/slices_s2/slices_s2_p0.h5\n       <...>\n       ATTRIBUTE \"writes\" {\n          DATATYPE  H5T_STD_I64LE\n          DATASPACE  SCALAR\n          DATA {\n          (0): 69\n          }\n       }\n\n    <...> \n\n```\n\nBizarrely, if I do the same tests and include checkpointing, checkpoint files respect the max_writes=1/file, and I get regular checkpoint sets output even though the other output files don't (e.g., I have 48 checkpoint sets, s1 -- s48, but still only 2 normal analysis sets, s1 and s2, with 20 writes in s1 and arbitrarily many in s2).\n\nAny ideas where this is coming from?  I'm starting to dive into the PR diffs and my best guess is in evaluator.py.\n\nSorry this isn't more clearly defined; it came up while doing production runs.\n\nWill let you know if I figure anything out,\n--Ben", "markup": "markdown", "html": "<p>Jeff,\n    I've been testing out checkpointing in this pull request.  The checkpointing itself (and restarts) works great (thanks Jeff!!!), but I have come across a very odd problem for other outputs.  When I'm doing runs using this PR (I have disabled checkpointing in the run in question, to try and narrow this down), I think that only the first set of normal analysis outputs respects the max_writes/file. </p>\n<p>In particular, I'm doing 20 writes per file normally.  On the main branch of dedalus, this works as intended (just tested) and each file contains exactly 20 writes.  When I switch over to this PR and run the same script, the first output file (set 1) contains 20 writes as intended, but then the second output file contains arbitrarily many writes (all further writes go into set 2).</p>\n<p>Here's an h5dump on one of my output files (p0 of 256) in set 1 showing the expected 20 writes/file:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>    h5dump FC_fixed_nrhocz2_Ra1e8_test/slices/slices_s1/slices_s1_p0.h5\n    &lt;...&gt;\n       ATTRIBUTE <span class=\"s2\">&quot;writes&quot;</span> <span class=\"o\">{</span>\n          DATATYPE  H5T_STD_I64LE\n          DATASPACE  SCALAR\n          DATA <span class=\"o\">{</span>\n          <span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>: <span class=\"m\">20</span>\n          <span class=\"o\">}</span>\n       <span class=\"o\">}</span>\n    &lt;...&gt;\n</pre></div>\n\n\n<p>and here is the same in set 2, showing an unexepected 69 writes (corresponding to when I killed the run; it would just keep accumulating otherwise in this same set):</p>\n<div class=\"codehilite language-bash\"><pre><span></span>     h5dump FC_fixed_nrhocz2_Ra1e8_test/slices/slices_s2/slices_s2_p0.h5\n       &lt;...&gt;\n       ATTRIBUTE <span class=\"s2\">&quot;writes&quot;</span> <span class=\"o\">{</span>\n          DATATYPE  H5T_STD_I64LE\n          DATASPACE  SCALAR\n          DATA <span class=\"o\">{</span>\n          <span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span>: <span class=\"m\">69</span>\n          <span class=\"o\">}</span>\n       <span class=\"o\">}</span>\n\n    &lt;...&gt; \n</pre></div>\n\n\n<p>Bizarrely, if I do the same tests and include checkpointing, checkpoint files respect the max_writes=1/file, and I get regular checkpoint sets output even though the other output files don't (e.g., I have 48 checkpoint sets, s1 -- s48, but still only 2 normal analysis sets, s1 and s2, with 20 writes in s1 and arbitrarily many in s2).</p>\n<p>Any ideas where this is coming from?  I'm starting to dive into the PR diffs and my best guess is in evaluator.py.</p>\n<p>Sorry this isn't more clearly defined; it came up while doing production runs.</p>\n<p>Will let you know if I figure anything out,\n--Ben</p>", "type": "rendered"}, "created_on": "2015-12-05T21:40:25.867394+00:00", "user": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "updated_on": "2015-12-05T21:40:25.869223+00:00", "type": "pullrequest_comment", "id": 12481777}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "5eca790b34a3", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/5eca790b34a3.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/5eca790b34a3"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-11-06T22:04:20.904203+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "e895671ca134", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/e895671ca134.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/e895671ca134"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-11-06T22:02:13.334795+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "92887e6edce9", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/92887e6edce9.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/92887e6edce9"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "date": "2015-11-06T21:40:22.260676+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "ca092bb6f340", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/ca092bb6f340.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/ca092bb6f340"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "date": "2015-11-06T17:46:34.533068+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "c76460e87a4f", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/c76460e87a4f.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/c76460e87a4f"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "Benjamin Brown", "uuid": "{7ccecdb3-3639-4001-8249-060e80320bda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D"}, "html": {"href": "https://bitbucket.org/%7B7ccecdb3-3639-4001-8249-060e80320bda%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571/8bc6f4da-871a-48b1-88ea-998663d18142/128"}}, "nickname": "Benjamin Brown", "type": "user", "account_id": "557058:0696c4b9-e94c-41ac-82be-62ad4f0ec571"}, "date": "2015-11-06T17:12:33.515503+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "ec17cc534463", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/ec17cc534463.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/ec17cc534463"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-10-25T01:43:20.415478+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "bc2ddd5790cc", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/bc2ddd5790cc.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/bc2ddd5790cc"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-10-24T23:14:13.865944+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"comment": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35/comments/11035689.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35/_/diff#comment-11035689"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}, "content": {"raw": "Hi Jeff.  2 quick things besides what we discussed today. 1) It looks like one of the early merges went a little awry since there are some non-executable insertions and deletions to core files in the first couple commits here (looks like diff output).  2) It looks like every line of checkpointing.py (at least as displayed by bitbuckets side-by-side) gets modified in the second commit, so the easiest solution to 1 might be to just collapse them both out and add your version of checkpoint.py as a new addition.", "markup": "markdown", "html": "<p>Hi Jeff.  2 quick things besides what we discussed today. 1) It looks like one of the early merges went a little awry since there are some non-executable insertions and deletions to core files in the first couple commits here (looks like diff output).  2) It looks like every line of checkpointing.py (at least as displayed by bitbuckets side-by-side) gets modified in the second commit, so the easiest solution to 1 might be to just collapse them both out and add your version of checkpoint.py as a new addition.</p>", "type": "rendered"}, "created_on": "2015-10-22T01:03:21.860713+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2015-10-22T01:03:21.863376+00:00", "type": "pullrequest_comment", "id": 11035689}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "93e03c4665b4", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/93e03c4665b4.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/93e03c4665b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-10-21T22:34:05.632787+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "93e03c4665b4", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/93e03c4665b4.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/93e03c4665b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-10-21T20:05:22.006486+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}, {"update": {"description": "Introduce a very simple API for checkpointing, based on Ben's original ideas. A `Checkpoint` object creates a simple `FileHandler` called checkpoint that writes the state to a separate file each time it is evaluated. An example script, `examples/ivp/busse_annulus/busse.py`, shows how to use this. There is a simple helper function that allows you to pick up all of your other analysis files where they left off.\r\n\r\nKnown Issues\r\n--------------------\r\n* if the restart is from a previous time, analysis files will have two copies of all repeated timesteps. This does not present any particular challenge to the user, but it could be cleaned up in the future.\r\n", "title": "Simple Checkpointing mechanism", "reviewers": [], "destination": {"commit": {"hash": "93e03c4665b4", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/93e03c4665b4.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/93e03c4665b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "branch": {"name": "default"}}, "state": "OPEN", "source": {"commit": {"hash": "0ecbf30a88b6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev/commit/0ecbf30a88b6"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev/commits/0ecbf30a88b6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jsoishi/dedalus-dev"}, "html": {"href": "https://bitbucket.org/jsoishi/dedalus-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c07bc1c8-e146-4743-a1ab-8867ee6eb886}ts=python"}}, "type": "repository", "name": "dedalus-dev", "full_name": "jsoishi/dedalus-dev", "uuid": "{c07bc1c8-e146-4743-a1ab-8867ee6eb886}"}, "branch": {"name": "default"}}, "reason": "", "author": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}, "date": "2015-10-21T20:05:21.741702+00:00", "changes": {}}, "pull_request": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/35.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/35"}}, "title": "Simple Checkpointing mechanism"}}]}