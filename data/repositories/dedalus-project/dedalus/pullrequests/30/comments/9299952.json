{"links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/30/comments/9299952.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/30/_/diff#comment-9299952"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/pullrequests/30.json"}, "html": {"href": "#!/dedalus-project/dedalus/pull-requests/30"}}, "title": "[WIP] Checkpointing and restart capability"}, "content": {"raw": "Hi Ben, I spent some time thinking about restarts, and realized that a few of the goals we listed here may be pretty intricate.  In particular `#3`: picking up analysis tasks from the last write.  The issue is that generally the number of handlers, the specific analysis tasks, and/or their cadences may all change when you restart, so working out a system that begins with the right write numbers, etc., may be tricky and have a lot of corner cases.\n\nThat issue aside: I wrote up a 'load_state' method for the IVP solver that allows you to load state variables from any (merged) dedalus HDF5 output file, and returns the timestep that was used when that snapshot was created.  It automatically detects and handles any layout and resolution change, so should pass `#1`, `#2` (using RK methods), and `#4` on your list above.\n\nI'll put together an example using it with the 2D RBC example in my branch.  It may provide a good low-level solution for basic restarting using the current file handler, and serve as a good base for a higher-level checkpointing system focused on the other usability features you've outlined here.  Thoughts?", "markup": "markdown", "html": "<p>Hi Ben, I spent some time thinking about restarts, and realized that a few of the goals we listed here may be pretty intricate.  In particular <code>#3</code>: picking up analysis tasks from the last write.  The issue is that generally the number of handlers, the specific analysis tasks, and/or their cadences may all change when you restart, so working out a system that begins with the right write numbers, etc., may be tricky and have a lot of corner cases.</p>\n<p>That issue aside: I wrote up a 'load_state' method for the IVP solver that allows you to load state variables from any (merged) dedalus HDF5 output file, and returns the timestep that was used when that snapshot was created.  It automatically detects and handles any layout and resolution change, so should pass <code>#1</code>, <code>#2</code> (using RK methods), and <code>#4</code> on your list above.</p>\n<p>I'll put together an example using it with the 2D RBC example in my branch.  It may provide a good low-level solution for basic restarting using the current file handler, and serve as a good base for a higher-level checkpointing system focused on the other usability features you've outlined here.  Thoughts?</p>", "type": "rendered"}, "created_on": "2015-08-23T00:00:24.201234+00:00", "user": {"display_name": "Keaton Burns", "uuid": "{3d3e64f1-bf12-45df-b655-4543d8fb34c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D"}, "html": {"href": "https://bitbucket.org/%7B3d3e64f1-bf12-45df-b655-4543d8fb34c4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e31a7835-5317-4dfa-8551-f32a06f40279/40f33f99-2b75-4a17-a8c2-07c8d74c7480/128"}}, "nickname": "kburns", "type": "user", "account_id": "557058:e31a7835-5317-4dfa-8551-f32a06f40279"}, "updated_on": "2015-08-23T00:02:48.531715+00:00", "type": "pullrequest_comment", "id": 9299952}