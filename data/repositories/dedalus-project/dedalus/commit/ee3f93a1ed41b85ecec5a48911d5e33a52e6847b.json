{"rendered": {"message": {"raw": "This commit introduces a simple Checkpointing API. It is the result of collapsing several intermediate revisions; the commit logs for those are below.\n\nCollapsed revision\n* merged.\n* Merged dedalus-project/dedalus into default\n* merged.\n* Collapsed Ben's Checkpointing revisions:\n\n* Moving checkpointing into new naming location.\n* Functioning checkpoint restart; CFL calcs still broken and rescaling not tested.\n* Implementing Daniel's suggestion for CFL calculation on restart.\n\nAs suggested in e-mail on 12/30/14.  Tested and functions but currently takes whatever is stored in self.stored_dt (initial_dt) as first step.  Will address in checkpointing.\n* Working with Daniel; CFL now properly calculates correct CFL on restart.  Now just need to store prior dt in checkpoint.\n* Adding memory to the RK timesteppers for the current dt.\n* Working short-term solution to CFL.\n\nFixes lack of prior information about timestep size by avoiding doing min/max checks on first iteration.\n\nPerplexing problem: first two timesteps seem to have same timestep.\n* Daniel figured out source of repeated timestep on restart.  Also : minor output change (info->debug)\n\nIssue is that we use the prior state to calculate the dt of the next step.  Normally, this is no issue, because we provide the intial step and then run from there.  On restart, this leads to two steps of same dt size, because first we evaulate the state to get a dt and then we use that same state (now stored as the prior step) to evaulauate and get a dt for step 2 (necessarily, same size as step 1).  This can be fixed by providing a dt on restart from a checkpoint file, or by doing our dt based on the current state.  Interesting.\n* Merge.\n* Merging to main branch and updates since spring.\n* Merge.\n* Adding rayleigh_benard test script for restarting from checkpoint.\n* Cleaning up doc slightly.\n* Main branch merge.\n* Merged to main branch.\n* Merging to main branch: bug fix for LBVPs and EVPs.\n* Completed simple checkpointing API\n* added find_output_counts; rewrote to use load_state.\n* completed simple checkpointing API\n* correcting errors in rebase process.\n* added feature, suggested by Evan Anders, to have a list of directories\nto exclude from checkpoint restarts. By default, checkpointing will\nassume all subdirectories of the run directory except for\n\"checkpoints/\" are Dedalus analysis directories to be restarted. The\nexcluded_dirs keyword to the Checkpoint object can contain a list of\ndirectories to be ignored.\n* fix by Ben to avoid bug in which max_writes was not respected after restart.\n* merged.", "markup": "markdown", "html": "<p>This commit introduces a simple Checkpointing API. It is the result of collapsing several intermediate revisions; the commit logs for those are below.</p>\n<p>Collapsed revision<br />\n<em> merged.<br />\n</em> Merged dedalus-project/dedalus into default<br />\n<em> merged.<br />\n</em> Collapsed Ben's Checkpointing revisions:</p>\n<ul>\n<li>Moving checkpointing into new naming location.</li>\n<li>Functioning checkpoint restart; CFL calcs still broken and rescaling not tested.</li>\n<li>Implementing Daniel's suggestion for CFL calculation on restart.</li>\n</ul>\n<p>As suggested in e-mail on 12/30/14.  Tested and functions but currently takes whatever is stored in self.stored_dt (initial_dt) as first step.  Will address in checkpointing.<br />\n<em> Working with Daniel; CFL now properly calculates correct CFL on restart.  Now just need to store prior dt in checkpoint.<br />\n</em> Adding memory to the RK timesteppers for the current dt.<br />\n* Working short-term solution to CFL.</p>\n<p>Fixes lack of prior information about timestep size by avoiding doing min/max checks on first iteration.</p>\n<p>Perplexing problem: first two timesteps seem to have same timestep.<br />\n* Daniel figured out source of repeated timestep on restart.  Also : minor output change (info-&gt;debug)</p>\n<p>Issue is that we use the prior state to calculate the dt of the next step.  Normally, this is no issue, because we provide the intial step and then run from there.  On restart, this leads to two steps of same dt size, because first we evaulate the state to get a dt and then we use that same state (now stored as the prior step) to evaulauate and get a dt for step 2 (necessarily, same size as step 1).  This can be fixed by providing a dt on restart from a checkpoint file, or by doing our dt based on the current state.  Interesting.<br />\n<em> Merge.<br />\n</em> Merging to main branch and updates since spring.<br />\n<em> Merge.<br />\n</em> Adding rayleigh_benard test script for restarting from checkpoint.<br />\n<em> Cleaning up doc slightly.<br />\n</em> Main branch merge.<br />\n<em> Merged to main branch.<br />\n</em> Merging to main branch: bug fix for LBVPs and EVPs.<br />\n<em> Completed simple checkpointing API<br />\n</em> added find_output_counts; rewrote to use load_state.<br />\n<em> completed simple checkpointing API<br />\n</em> correcting errors in rebase process.<br />\n<em> added feature, suggested by Evan Anders, to have a list of directories<br />\nto exclude from checkpoint restarts. By default, checkpointing will<br />\nassume all subdirectories of the run directory except for<br />\n\"checkpoints/\" are Dedalus analysis directories to be restarted. The<br />\nexcluded_dirs keyword to the Checkpoint object can contain a list of<br />\ndirectories to be ignored.</em> fix by Ben to avoid bug in which max_writes was not respected after restart.<br />\n* merged.</p>", "type": "rendered"}}, "hash": "ee3f93a1ed41b85ecec5a48911d5e33a52e6847b", "repository": {"links": {"self": {"href": "data/repositories/dedalus-project/dedalus.json"}, "html": {"href": "#!/dedalus-project/dedalus"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1dc39ab6-2798-450d-af2f-e976f94b5794}ts=2009435"}}, "type": "repository", "name": "dedalus", "full_name": "dedalus-project/dedalus", "uuid": "{1dc39ab6-2798-450d-af2f-e976f94b5794}"}, "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b.json"}, "comments": {"href": "data/repositories/dedalus-project/dedalus/commit/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dedalus-project/dedalus/patch/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b"}, "html": {"href": "#!/dedalus-project/dedalus/commits/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dedalus-project/dedalus/diff/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dedalus-project/dedalus/commit/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b/approve"}, "statuses": {"href": "data/repositories/dedalus-project/dedalus/commit/ee3f93a1ed41b85ecec5a48911d5e33a52e6847b/statuses_page=1.json"}}, "author": {"raw": "J.S. Oishi <jsoishi@gmail.com>", "type": "author", "user": {"display_name": "J. S. Oishi", "uuid": "{ab7c2db2-7642-47a8-9264-0939f601d904}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D"}, "html": {"href": "https://bitbucket.org/%7Bab7c2db2-7642-47a8-9264-0939f601d904%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:94f96ca9-adbd-4972-8f41-b00b9683f819/4a90742a-28a5-4829-a074-c23c9f5fcc81/128"}}, "nickname": "jsoishi", "type": "user", "account_id": "557058:94f96ca9-adbd-4972-8f41-b00b9683f819"}}, "summary": {"raw": "This commit introduces a simple Checkpointing API. It is the result of collapsing several intermediate revisions; the commit logs for those are below.\n\nCollapsed revision\n* merged.\n* Merged dedalus-project/dedalus into default\n* merged.\n* Collapsed Ben's Checkpointing revisions:\n\n* Moving checkpointing into new naming location.\n* Functioning checkpoint restart; CFL calcs still broken and rescaling not tested.\n* Implementing Daniel's suggestion for CFL calculation on restart.\n\nAs suggested in e-mail on 12/30/14.  Tested and functions but currently takes whatever is stored in self.stored_dt (initial_dt) as first step.  Will address in checkpointing.\n* Working with Daniel; CFL now properly calculates correct CFL on restart.  Now just need to store prior dt in checkpoint.\n* Adding memory to the RK timesteppers for the current dt.\n* Working short-term solution to CFL.\n\nFixes lack of prior information about timestep size by avoiding doing min/max checks on first iteration.\n\nPerplexing problem: first two timesteps seem to have same timestep.\n* Daniel figured out source of repeated timestep on restart.  Also : minor output change (info->debug)\n\nIssue is that we use the prior state to calculate the dt of the next step.  Normally, this is no issue, because we provide the intial step and then run from there.  On restart, this leads to two steps of same dt size, because first we evaulate the state to get a dt and then we use that same state (now stored as the prior step) to evaulauate and get a dt for step 2 (necessarily, same size as step 1).  This can be fixed by providing a dt on restart from a checkpoint file, or by doing our dt based on the current state.  Interesting.\n* Merge.\n* Merging to main branch and updates since spring.\n* Merge.\n* Adding rayleigh_benard test script for restarting from checkpoint.\n* Cleaning up doc slightly.\n* Main branch merge.\n* Merged to main branch.\n* Merging to main branch: bug fix for LBVPs and EVPs.\n* Completed simple checkpointing API\n* added find_output_counts; rewrote to use load_state.\n* completed simple checkpointing API\n* correcting errors in rebase process.\n* added feature, suggested by Evan Anders, to have a list of directories\nto exclude from checkpoint restarts. By default, checkpointing will\nassume all subdirectories of the run directory except for\n\"checkpoints/\" are Dedalus analysis directories to be restarted. The\nexcluded_dirs keyword to the Checkpoint object can contain a list of\ndirectories to be ignored.\n* fix by Ben to avoid bug in which max_writes was not respected after restart.\n* merged.", "markup": "markdown", "html": "<p>This commit introduces a simple Checkpointing API. It is the result of collapsing several intermediate revisions; the commit logs for those are below.</p>\n<p>Collapsed revision<br />\n<em> merged.<br />\n</em> Merged dedalus-project/dedalus into default<br />\n<em> merged.<br />\n</em> Collapsed Ben's Checkpointing revisions:</p>\n<ul>\n<li>Moving checkpointing into new naming location.</li>\n<li>Functioning checkpoint restart; CFL calcs still broken and rescaling not tested.</li>\n<li>Implementing Daniel's suggestion for CFL calculation on restart.</li>\n</ul>\n<p>As suggested in e-mail on 12/30/14.  Tested and functions but currently takes whatever is stored in self.stored_dt (initial_dt) as first step.  Will address in checkpointing.<br />\n<em> Working with Daniel; CFL now properly calculates correct CFL on restart.  Now just need to store prior dt in checkpoint.<br />\n</em> Adding memory to the RK timesteppers for the current dt.<br />\n* Working short-term solution to CFL.</p>\n<p>Fixes lack of prior information about timestep size by avoiding doing min/max checks on first iteration.</p>\n<p>Perplexing problem: first two timesteps seem to have same timestep.<br />\n* Daniel figured out source of repeated timestep on restart.  Also : minor output change (info-&gt;debug)</p>\n<p>Issue is that we use the prior state to calculate the dt of the next step.  Normally, this is no issue, because we provide the intial step and then run from there.  On restart, this leads to two steps of same dt size, because first we evaulate the state to get a dt and then we use that same state (now stored as the prior step) to evaulauate and get a dt for step 2 (necessarily, same size as step 1).  This can be fixed by providing a dt on restart from a checkpoint file, or by doing our dt based on the current state.  Interesting.<br />\n<em> Merge.<br />\n</em> Merging to main branch and updates since spring.<br />\n<em> Merge.<br />\n</em> Adding rayleigh_benard test script for restarting from checkpoint.<br />\n<em> Cleaning up doc slightly.<br />\n</em> Main branch merge.<br />\n<em> Merged to main branch.<br />\n</em> Merging to main branch: bug fix for LBVPs and EVPs.<br />\n<em> Completed simple checkpointing API<br />\n</em> added find_output_counts; rewrote to use load_state.<br />\n<em> completed simple checkpointing API<br />\n</em> correcting errors in rebase process.<br />\n<em> added feature, suggested by Evan Anders, to have a list of directories<br />\nto exclude from checkpoint restarts. By default, checkpointing will<br />\nassume all subdirectories of the run directory except for<br />\n\"checkpoints/\" are Dedalus analysis directories to be restarted. The<br />\nexcluded_dirs keyword to the Checkpoint object can contain a list of<br />\ndirectories to be ignored.</em> fix by Ben to avoid bug in which max_writes was not respected after restart.<br />\n* merged.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "0b86e67f4ad25f1a6edafb0ce0cbcf303ee3531a", "type": "commit", "links": {"self": {"href": "data/repositories/dedalus-project/dedalus/commit/0b86e67f4ad25f1a6edafb0ce0cbcf303ee3531a.json"}, "html": {"href": "#!/dedalus-project/dedalus/commits/0b86e67f4ad25f1a6edafb0ce0cbcf303ee3531a"}}}], "date": "2017-03-20T20:33:11+00:00", "message": "This commit introduces a simple Checkpointing API. It is the result of collapsing several intermediate revisions; the commit logs for those are below.\n\nCollapsed revision\n* merged.\n* Merged dedalus-project/dedalus into default\n* merged.\n* Collapsed Ben's Checkpointing revisions:\n\n* Moving checkpointing into new naming location.\n* Functioning checkpoint restart; CFL calcs still broken and rescaling not tested.\n* Implementing Daniel's suggestion for CFL calculation on restart.\n\nAs suggested in e-mail on 12/30/14.  Tested and functions but currently takes whatever is stored in self.stored_dt (initial_dt) as first step.  Will address in checkpointing.\n* Working with Daniel; CFL now properly calculates correct CFL on restart.  Now just need to store prior dt in checkpoint.\n* Adding memory to the RK timesteppers for the current dt.\n* Working short-term solution to CFL.\n\nFixes lack of prior information about timestep size by avoiding doing min/max checks on first iteration.\n\nPerplexing problem: first two timesteps seem to have same timestep.\n* Daniel figured out source of repeated timestep on restart.  Also : minor output change (info->debug)\n\nIssue is that we use the prior state to calculate the dt of the next step.  Normally, this is no issue, because we provide the intial step and then run from there.  On restart, this leads to two steps of same dt size, because first we evaulate the state to get a dt and then we use that same state (now stored as the prior step) to evaulauate and get a dt for step 2 (necessarily, same size as step 1).  This can be fixed by providing a dt on restart from a checkpoint file, or by doing our dt based on the current state.  Interesting.\n* Merge.\n* Merging to main branch and updates since spring.\n* Merge.\n* Adding rayleigh_benard test script for restarting from checkpoint.\n* Cleaning up doc slightly.\n* Main branch merge.\n* Merged to main branch.\n* Merging to main branch: bug fix for LBVPs and EVPs.\n* Completed simple checkpointing API\n* added find_output_counts; rewrote to use load_state.\n* completed simple checkpointing API\n* correcting errors in rebase process.\n* added feature, suggested by Evan Anders, to have a list of directories\nto exclude from checkpoint restarts. By default, checkpointing will\nassume all subdirectories of the run directory except for\n\"checkpoints/\" are Dedalus analysis directories to be restarted. The\nexcluded_dirs keyword to the Checkpoint object can contain a list of\ndirectories to be ignored.\n* fix by Ben to avoid bug in which max_writes was not respected after restart.\n* merged.", "type": "commit", "git_hash": "8e735c078bc4f5b31ac7a07dc0e7f753822e3297", "tags": null, "branches": "default"}